import os
import re
import io
import zipfile
import tempfile
import base64
import logging
import warnings
import asyncio
import shutil
from collections import deque

from telethon import TelegramClient, events, Button
from telethon.errors import MessageNotModifiedError
from ebooklib import epub
from bs4 import BeautifulSoup, XMLParsedAsHTMLWarning
from PIL import Image
from lxml import etree
from docx import Document

warnings.filterwarnings("ignore", category=XMLParsedAsHTMLWarning)
logging.basicConfig(level=logging.INFO)

api_id = 24519852
api_hash = '2186f59fdf9c2ad4e7ddf0deb250ff0c'
client = TelegramClient('unified_bot', api_id, api_hash)

RESOLUTIONS = {
    '–£–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è': None,
    '64p': (64, 64),
    '144p': (256, 144),
    '360p': (640, 360),
    '480p': (854, 480),
    '720p': (1280, 720),
    '1080p': (1920, 1080)
}

user_files = {}
user_mode = {}
last_message_text = {}

# –°–∏—Å—Ç–µ–º–∞ –æ—á–µ—Ä–µ–¥–∏
MAX_CONCURRENT_TASKS = 1
active_tasks = 0
task_queue = deque()
queue_lock = asyncio.Lock()

# –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥–ª–∞–≤
CHAPTER_RE = re.compile(
    r"(?i)^\s*("
    r"–ì–ª–∞–≤–∞|chapter|—á–∞—Å—Ç—å|part|—Ç–æ–º|volume|–∫–Ω–∏–≥–∞|book|—Ä–∞–∑–¥–µ–ª|section|"
    r"–ø—Ä–æ–ª–æ–≥|prologue|—ç–ø–∏–ª–æ–≥|epilogue|–ø—Ä–µ–¥–∏—Å–ª–æ–≤–∏–µ|–≤–≤–µ–¥–µ–Ω–∏–µ|–∑–∞–∫–ª—é—á–µ–Ω–∏–µ|"
    r"–ø—Ä–∏–º–µ—á–∞–Ω–∏—è|–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ|–∞–Ω–Ω–æ—Ç–∞—Ü–∏—è|annotation|–æ–ø–∏—Å–∞–Ω–∏–µ"
    r")[\s\.:]*(\d+|[IVX]+|[–ê-–Ø])?", re.IGNORECASE | re.UNICODE
)

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—å—é
async def queue_manager(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—å—é –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    async def wrapper(*args, **kwargs):
        global active_tasks
        
        async with queue_lock:
            if active_tasks >= MAX_CONCURRENT_TASKS:
                future = asyncio.Future()
                task_queue.append(future)
                
                event = args[0]
                queue_position = len(task_queue)
                await event.respond(
                    f"‚è≥ –í–∞—à –∑–∞–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å.\n"
                    f"–ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: {queue_position}\n"
                    f"–û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏..."
                )
                
                queue_lock.release()
                try:
                    await future
                finally:
                    await queue_lock.acquire()
            
            active_tasks += 1
        
        try:
            result = await func(*args, **kwargs)
            return result
        finally:
            async with queue_lock:
                active_tasks -= 1
                
                if task_queue:
                    next_task = task_queue.popleft()
                    next_task.set_result(True)
    
    return wrapper

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
def create_progress_bar(current, total, width=20):
    if total == 0:
        return "‚ñì" * width + " 100%"
    progress = int((current / total) * width)
    bar = "‚ñì" * progress + "‚ñë" * (width - progress)
    percentage = int((current / total) * 100)
    return f"{bar} {percentage}%"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
def should_update_progress(current, total, last_updated_percent):
    if total == 0:
        return True
    current_percent = int((current / total) * 100)
    return current_percent - last_updated_percent >= 5

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
async def safe_edit_message(message, new_text):
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è"""
    try:
        message_id = message.id
        if message_id not in last_message_text or last_message_text[message_id] != new_text:
            await message.edit(new_text)
            last_message_text[message_id] = new_text
    except MessageNotModifiedError:
        pass
    except Exception as e:
        logging.error(f"Error editing message: {e}")

# –ö–æ–º–∞–Ω–¥—ã
@client.on(events.NewMessage(pattern='/start'))
async def start(event):
    await event.respond(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ê–¥–∏–∫–∏—è ‚Äî –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏.\n\n"
        "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "‚Ä¢ –°–∂–∞—Ç–∏–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ .epub, .fb2, .docx\n"
        "‚Ä¢ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≥–ª–∞–≤ –∏–∑ EPUB, FB2, DOCX –∏ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ —Å –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ–º\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –≤ —Ñ–∞–π–ª–∞—Ö\n\n"
        "‚ö†Ô∏è –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ.\n"
        "–§–∞–π–ª—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Å—Ç—Ä–æ–≥–æ –ø–æ –æ—á–µ—Ä–µ–¥–∏.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    )

@client.on(events.NewMessage(pattern='/help'))
async def help_command(event):
    await event.respond(
        "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n"
        "/start    - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help     - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/compress - –°–∂–∞—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
        "/extract  - –ò–∑–≤–ª–µ—á—å –≥–ª–∞–≤—ã –∏ –ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å —Å –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ–º\n"
        "/fix      - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫\n"
        "/cancel   - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n"
        "/status   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏\n"
    )

@client.on(events.NewMessage(pattern='/status'))
async def status_command(event):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏"""
    status_text = "üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:\n\n"
    
    if active_tasks > 0:
        status_text += "üîÑ –°–µ–π—á–∞—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Ñ–∞–π–ª\n"
    else:
        status_text += "‚úÖ –ë–æ—Ç —Å–≤–æ–±–æ–¥–µ–Ω\n"
    
    status_text += f"‚è≥ –í –æ—á–µ—Ä–µ–¥–∏: {len(task_queue)} —Ñ–∞–π–ª(–æ–≤)"
    
    await event.respond(status_text)

@client.on(events.NewMessage(pattern='/cancel'))
async def cancel(event):
    user_id = event.sender_id
    user_files.pop(user_id, None)
    user_mode.pop(user_id, None)
    await event.respond("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")

@client.on(events.NewMessage(pattern='/compress'))
async def compress_cmd(event):
    user_mode[event.sender_id] = 'compress'
    await event.respond("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª .epub, .fb2 –∏–ª–∏ .docx –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")

@client.on(events.NewMessage(pattern='/extract'))
async def extract_cmd(event):
    user_mode[event.sender_id] = 'extract'
    await event.respond("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª .epub, .fb2 –∏–ª–∏ .docx. –Ø –∏–∑–≤–ª–µ–∫—É –≥–ª–∞–≤—ã –∏ –ø–µ—Ä–µ—Å–æ–±–µ—Ä—É –µ–≥–æ —Å –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ–º.")

@client.on(events.NewMessage(pattern='/fix'))
async def fix_cmd(event):
    user_mode[event.sender_id] = 'fix'
    await event.respond(
        "üîß –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø–æ—á–∏–Ω–∫–∏ —Ñ–∞–π–ª–æ–≤\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª .epub, .fb2 –∏–ª–∏ .docx –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫."
    )

# –ü—Ä–∏—ë–º —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
@client.on(events.NewMessage(incoming=True))
async def handle_file(event):
    if not event.file:
        return
    user_id = event.sender_id
    mode = user_mode.get(user_id)
    if not mode:
        return

    filename = event.file.name or ''
    ext = os.path.splitext(filename)[1].lower()
    file_size = event.file.size

    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
    progress_msg = await event.respond("üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞...\n‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 0%")
    
    file_data = io.BytesIO()
    last_percent = 0
    
    async def progress_callback(current, total):
        nonlocal last_percent
        if total > 0 and should_update_progress(current, total, last_percent):
            progress_bar = create_progress_bar(current, total)
            new_text = f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞...\n{progress_bar}"
            await safe_edit_message(progress_msg, new_text)
            last_percent = int((current / total) * 100)
    
    await client.download_media(event.message, file=file_data, progress_callback=progress_callback)
    file_data.seek(0)

    await safe_edit_message(progress_msg, "üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞...")

    with tempfile.NamedTemporaryFile(delete=False, suffix=ext) as tmp:
        tmp.write(file_data.read())
        tmp_path = tmp.name

    user_files[user_id] = (filename, tmp_path)
    await progress_msg.delete()
    last_message_text.pop(progress_msg.id, None)

    if mode == 'compress' and ext in ['.epub', '.fb2', '.docx']:
        buttons = [Button.inline(label, data=label.encode()) for label in RESOLUTIONS]
        await event.respond("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:", buttons=buttons)

    elif mode == 'extract' and ext in ['.epub', '.fb2', '.docx']:
        await process_extract_with_queue(event, user_id, filename, tmp_path, ext)
        
    elif mode == 'fix' and ext in ['.epub', '.fb2', '.docx']:
        await process_fix_with_queue(event, user_id, filename, tmp_path, ext)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å –æ—á–µ—Ä–µ–¥—å—é
@queue_manager
async def process_extract_with_queue(event, user_id, filename, tmp_path, ext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≥–ª–∞–≤ —Å —É—á–µ—Ç–æ–º –æ—á–µ—Ä–µ–¥–∏"""
    await event.respond("‚úÖ –§–∞–π–ª –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. –ù–∞—á–∏–Ω–∞—é...")
    try:
        base = os.path.splitext(filename)[0]
        output_path = None
        
        if ext == '.epub':
            chapters, images = await extract_chapters_from_epub_async(tmp_path, event)
            if not chapters:
                await event.respond("–ì–ª–∞–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ EPUB.")
                return
            output_path = os.path.join(tempfile.gettempdir(), f"{base}_converted.epub")
            build_progress = await event.respond("üìö –°–±–æ—Ä–∫–∞ EPUB...\n‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 0%")
            await build_epub_async(base, chapters, images, output_path, build_progress)
            await build_progress.delete()
            last_message_text.pop(build_progress.id, None)
            await client.send_file(user_id, output_path, caption="‚úÖ EPUB –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω —Å –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ–º.")
            
        elif ext == '.fb2':
            chapters = await extract_chapters_from_fb2_async(tmp_path, event)
            if not chapters:
                await event.respond("–ì–ª–∞–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ FB2.")
                return
            output_path = os.path.join(tempfile.gettempdir(), f"{base}_converted.fb2")
            build_progress = await event.respond("üìö –°–±–æ—Ä–∫–∞ FB2...\n‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 0%")
            await build_fb2_with_toc_async(base, chapters, output_path, build_progress)
            await build_progress.delete()
            last_message_text.pop(build_progress.id, None)
            await client.send_file(user_id, output_path, caption="‚úÖ FB2 –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω —Å –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ–º.")
            
        elif ext == '.docx':
            chapters = await extract_chapters_from_docx_async(tmp_path, event)
            if not chapters:
                await event.respond("–ì–ª–∞–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ DOCX.")
                return
            output_path = os.path.join(tempfile.gettempdir(), f"{base}_converted.docx")
            build_progress = await event.respond("üìö –°–±–æ—Ä–∫–∞ DOCX...\n‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 0%")
            await build_docx_with_toc_async(base, chapters, output_path, build_progress)
            await build_progress.delete()
            last_message_text.pop(build_progress.id, None)
            await client.send_file(user_id, output_path, caption="‚úÖ DOCX –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω —Å –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ–º.")
        
        if output_path and os.path.exists(output_path):
            os.remove(output_path)
            
    except Exception as e:
        logging.error(f"Error processing file: {e}", exc_info=True)
        await event.respond(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        if os.path.exists(tmp_path):
            os.remove(tmp_path)
        user_mode.pop(user_id, None)
        user_files.pop(user_id, None)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –æ—á–µ—Ä–µ–¥—å—é
@queue_manager
async def process_fix_with_queue(event, user_id, filename, filepath, ext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –ø–æ—á–∏–Ω–∫–∏ —Å —É—á–µ—Ç–æ–º –æ—á–µ—Ä–µ–¥–∏"""
    await event.respond("üîß –ù–∞—á–∏–Ω–∞—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Ñ–∞–π–ª–∞...")
    try:
        if ext == '.fb2':
            await process_fb2_fix(event, user_id, filename, filepath)
        elif ext == '.docx':
            await process_docx_fix(event, user_id, filename, filepath)
        elif ext == '.epub':
            await process_epub_fix(event, user_id, filename, filepath)
    finally:
        if os.path.exists(filepath):
            os.remove(filepath)
        user_files.pop(user_id, None)
        user_mode.pop(user_id, None)

# Inline-–∫–Ω–æ–ø–∫–∏
@client.on(events.CallbackQuery)
async def handle_button(event):
    user_id = event.sender_id
    mode = user_mode.get(user_id)
    if not mode:
        return

    data = event.data.decode()
    filename, filepath = user_files.get(user_id, (None, None))
    if not filename or not os.path.exists(filepath):
        await event.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", alert=True)
        return

    ext = os.path.splitext(filename)[1].lower()

    if mode == 'compress':
        resolution = RESOLUTIONS.get(data)
        await event.edit(f"‚öôÔ∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {filename}...")
        await process_compression_with_queue(event, user_id, filename, filepath, resolution, ext)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∂–∞—Ç–∏—è —Å –æ—á–µ—Ä–µ–¥—å—é
@queue_manager
async def process_compression_with_queue(event, user_id, filename, filepath, resolution, ext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∂–∞—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —É—á–µ—Ç–æ–º –æ—á–µ—Ä–µ–¥–∏"""
    await event.edit("‚úÖ –§–∞–π–ª –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. –ù–∞—á–∏–Ω–∞—é...")
    
    if ext == '.fb2':
        await process_fb2(event, user_id, filename, filepath, resolution)
    elif ext == '.docx':
        await process_docx(event, user_id, filename, filepath, resolution)
    elif ext == '.epub':
        await process_epub_compression(event, user_id, filename, filepath, resolution)
    
    if os.path.exists(filepath):
        os.remove(filepath)
    user_files.pop(user_id, None)
    user_mode.pop(user_id, None)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π FB2 —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
async def process_fb2(event, user_id, filename, filepath, resolution):
    ns = {'fb2': 'http://www.gribuser.ru/xml/fictionbook/2.0'}
    tree = etree.parse(filepath)
    root = tree.getroot()
    binaries = root.xpath('//fb2:binary', namespaces=ns)

    changed = deleted = 0
    image_binaries = [b for b in binaries if 'image' in (b.get('content-type') or '')]
    total = len(image_binaries)
    
    if total == 0:
        await event.edit("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ.")
        return

    progress_msg = await event.respond(f"üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π FB2...\n‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 0%")
    last_percent = 0

    for current, binary in enumerate(image_binaries, 1):
        if should_update_progress(current, total, last_percent):
            progress_bar = create_progress_bar(current, total)
            action = "–£–¥–∞–ª–µ–Ω–∏–µ" if resolution is None else "–°–∂–∞—Ç–∏–µ"
            new_text = f"üñºÔ∏è {action} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π FB2...\n{progress_bar}"
            await safe_edit_message(progress_msg, new_text)
            last_percent = int((current / total) * 100)

        if resolution is None:
            binary_id = binary.get('id')
            if binary_id:
                for img_ref in root.xpath(f'//fb2:image[@l:href="#{binary_id}"]', 
                                        namespaces={'fb2': ns['fb2'], 'l': 'http://www.w3.org/1999/xlink'}):
                    img_ref.getparent().remove(img_ref)
            root.remove(binary)
            deleted += 1
        else:
            try:
                img = Image.open(io.BytesIO(base64.b64decode(binary.text))).convert('RGB')
                img.thumbnail(resolution, Image.Resampling.LANCZOS)
                buf = io.BytesIO()
                img.save(buf, format='JPEG', quality=30)
                binary.text = base64.b64encode(buf.getvalue()).decode()
                binary.set('content-type', 'image/jpeg')
                changed += 1
            except Exception:
                continue

    await safe_edit_message(progress_msg, "üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞...")
    base, ext = os.path.splitext(filename)
    out_path = os.path.join(tempfile.gettempdir(), f"{base}_compressed{ext}")
    tree.write(out_path, encoding='utf-8', xml_declaration=True)
    
    await progress_msg.delete()
    last_message_text.pop(progress_msg.id, None)
    await client.send_file(user_id, out_path, caption=f"‚úÖ –ì–æ—Ç–æ–≤–æ: —Å–∂–∞—Ç–æ {changed}, —É–¥–∞–ª–µ–Ω–æ {deleted}")
    os.remove(filepath)
    os.remove(out_path)

# DOCX —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
async def process_docx(event, user_id, filename, filepath, resolution):
    doc = Document(filepath)
    changed = deleted = 0
    total = len(doc.inline_shapes)
    
    if total == 0:
        await event.edit("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ.")
        return

    progress_msg = await event.respond(f"üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π DOCX...\n‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 0%")
    last_percent = 0

    if resolution is None:
        shapes_to_remove = []
        for current, shape in enumerate(doc.inline_shapes, 1):
            if should_update_progress(current, total, last_percent):
                progress_bar = create_progress_bar(current, total)
                new_text = f"üñºÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π DOCX...\n{progress_bar}"
                await safe_edit_message(progress_msg, new_text)
                last_percent = int((current / total) * 100)
            shapes_to_remove.append(shape)
        
        for shape in reversed(shapes_to_remove):
            try:
                shape._element.getparent().remove(shape._element)
                deleted += 1
            except Exception:
                continue
    else:
        for current, shape in enumerate(doc.inline_shapes, 1):
            if should_update_progress(current, total, last_percent):
                progress_bar = create_progress_bar(current, total)
                new_text = f"üñºÔ∏è –°–∂–∞—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π DOCX...\n{progress_bar}"
                await safe_edit_message(progress_msg, new_text)
                last_percent = int((current / total) * 100)
            
            try:
                r_id = shape._inline.graphic.graphicData.pic.blipFill.blip.embed
                img_part = doc.part.related_parts[r_id]
                img = Image.open(io.BytesIO(img_part.blob)).convert('RGB')
                img.thumbnail(resolution, Image.Resampling.LANCZOS)
                buf = io.BytesIO()
                img.save(buf, format='JPEG', quality=30)
                img_part._blob = buf.getvalue()
                changed += 1
            except Exception:
                continue

    await safe_edit_message(progress_msg, "üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
    base, ext = os.path.splitext(filename)
    out_path = os.path.join(tempfile.gettempdir(), f"{base}_compressed{ext}")
    doc.save(out_path)
    
    await progress_msg.delete()
    last_message_text.pop(progress_msg.id, None)
    await client.send_file(user_id, out_path, caption=f"‚úÖ –ì–æ—Ç–æ–≤–æ: —Å–∂–∞—Ç–æ {changed}, —É–¥–∞–ª–µ–Ω–æ {deleted}")
    os.remove(filepath)
    os.remove(out_path)

# EPUB —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
async def process_epub_compression(event, user_id, filename, filepath, resolution):
    book = epub.read_epub(filepath)
    changed = deleted = 0
    images = [item for item in list(book.get_items()) if item.media_type and item.media_type.startswith("image/")]
    total = len(images)
    
    if total == 0:
        await event.edit("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ EPUB.")
        return

    progress_msg = await event.respond(f"üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π EPUB...\n‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 0%")
    last_percent = 0

    for current, item in enumerate(images, 1):
        if should_update_progress(current, total, last_percent):
            progress_bar = create_progress_bar(current, total)
            action = "–£–¥–∞–ª–µ–Ω–∏–µ" if resolution is None else "–°–∂–∞—Ç–∏–µ"
            new_text = f"üñºÔ∏è {action} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π EPUB...\n{progress_bar}"
            await safe_edit_message(progress_msg, new_text)
            last_percent = int((current / total) * 100)

        if resolution is None:
            book.items.remove(item)
            deleted += 1
        else:
            try:
                img = Image.open(io.BytesIO(item.content)).convert("RGB")
                img.thumbnail(resolution, Image.Resampling.LANCZOS)
                buf = io.BytesIO()
                img.save(buf, format="JPEG", quality=30)
                item.content = buf.getvalue()
                item.media_type = "image/jpeg"
                changed += 1
            except Exception:
                continue

    await safe_edit_message(progress_msg, "üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ EPUB...")
    base, ext = os.path.splitext(filename)
    out_path = os.path.join(tempfile.gettempdir(), f"{base}_compressed{ext}")
    epub.write_epub(out_path, book)
    
    await progress_msg.delete()
    last_message_text.pop(progress_msg.id, None)
    await client.send_file(user_id, out_path, caption=f"‚úÖ –ì–æ—Ç–æ–≤–æ: —Å–∂–∞—Ç–æ {changed}, —É–¥–∞–ª–µ–Ω–æ {deleted}")
    os.remove(filepath)
    os.remove(out_path)

# EPUB: –≥–ª–∞–≤—ã —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
async def extract_chapters_from_epub_async(epub_path, event):
    temp_dir = tempfile.mkdtemp()
    html_blocks = []
    images = {}

    progress_msg = await event.respond("üìñ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ EPUB...\n‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 0%")
    
    try:
        with zipfile.ZipFile(epub_path, 'r') as zf:
            zf.extractall(temp_dir)

        await safe_edit_message(progress_msg, "üìñ –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ...\n‚ñì‚ñì‚ñì‚ñì‚ñì‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 25%")
        
        all_files = []
        for root, _, files in os.walk(temp_dir):
            for file in files:
                all_files.append(os.path.join(root, file))
        
        processed = 0
        total_files = len(all_files)
        
        for file_path in all_files:
            file = os.path.basename(file_path)
            if file.lower().endswith((".xhtml", ".html", ".htm")):
                try:
                    with open(file_path, "r", encoding="utf-8") as f:
                        html_blocks.append(BeautifulSoup(f, "lxml"))
                except Exception as e:
                    logging.warning(f"Could not parse HTML file {file}: {e}")
            elif file.lower().endswith((".jpg", ".jpeg", ".png", ".gif", ".svg", ".webp")):
                images[file] = file_path
            
            processed += 1
            if processed % 10 == 0:
                progress = int((processed / total_files) * 25) + 25
                progress_bar = "‚ñì" * (progress // 5) + "‚ñë" * (20 - progress // 5)
                new_text = f"üìñ –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤...\n{progress_bar} {progress}%"
                await safe_edit_message(progress_msg, new_text)

        await safe_edit_message(progress_msg, "üîç –ü–æ–∏—Å–∫ –≥–ª–∞–≤...\n‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 50%")
        
        chapters = []
        title, content, num = None, "", 0
        
        processed_blocks = 0
        total_blocks = len(html_blocks)
        
        for soup in html_blocks:
            if not soup.body:
                continue
            for elem in soup.body.find_all(recursive=False):
                text = elem.get_text(strip=True)
                match = CHAPTER_RE.match(text or "")
                if match:
                    if title:
                        chapters.append((num, title, content.strip()))
                    title = text
                    num_match = re.search(r'\d+', title)
                    num = int(num_match.group()) if num_match else len(chapters)
                    content = f"<h1>{title}</h1>"
                else:
                    content += str(elem)
            
            processed_blocks += 1
            if processed_blocks % 5 == 0:
                progress = 50 + int((processed_blocks / total_blocks) * 25)
                progress_bar = "‚ñì" * (progress // 5) + "‚ñë" * (20 - progress // 5)
                new_text = f"üîç –ü–æ–∏—Å–∫ –≥–ª–∞–≤...\n{progress_bar} {progress}%"
                await safe_edit_message(progress_msg, new_text)
        
        if title:
            chapters.append((num, title, content.strip()))

        await safe_edit_message(progress_msg, "üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...\n‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñë‚ñë‚ñë‚ñë‚ñë 75%")
        
        seen, result = set(), []
        for n, t, c in sorted(chapters, key=lambda x: x[0]):
            if t not in seen and len(c.strip()) > len(f"<h1>{t}</h1>"):
                result.append((n, t, c))
                seen.add(t)
        
        await safe_edit_message(progress_msg, f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≥–ª–∞–≤: {len(result)}\n‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì 100%")
        await asyncio.sleep(1)
        await progress_msg.delete()
        last_message_text.pop(progress_msg.id, None)
        
        return result, images
        
    finally:
        if os.path.exists(temp_dir):
            shutil.rmtree(temp_dir)

async def build_epub_async(title, chapters, image_paths, output_path, progress_msg):
    book = epub.EpubBook()
    book.set_identifier("converted")
    book.set_title(title)
    book.set_language("ru")
    book.add_author("Adikia Bot")

    spine = ['nav']
    toc = []
    
    total_steps = len(image_paths) + len(chapters) + 3
    current_step = 0

    for fname, path in image_paths.items():
        current_step += 1
        progress_bar = create_progress_bar(current_step, total_steps)
        new_text = f"üìö –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...\n{progress_bar}"
        await safe_edit_message(progress_msg, new_text)
        
        try:
            ext = os.path.splitext(fname)[1][1:].lower()
            mime = f"image/{'jpeg' if ext in ['jpg', 'jpeg'] else ext}"
            with open(path, 'rb') as f:
                book.add_item(epub.EpubItem(uid=fname, file_name=f"images/{fname}", media_type=mime, content=f.read()))
        except Exception as e:
            logging.warning(f"Could not add image {fname}: {e}")

    for i, (num, chapter_title, html_body) in enumerate(chapters, 1):
        current_step += 1
        progress_bar = create_progress_bar(current_step, total_steps)
        new_text = f"üìö –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤...\n{progress_bar}"
        await safe_edit_message(progress_msg, new_text)
        
        html = epub.EpubHtml(title=chapter_title, file_name=f"chap_{i}.xhtml", lang='ru')
        html.content = html_body
        book.add_item(html)
        spine.append(html)
        toc.append(epub.Link(html.file_name, chapter_title, f"chap_{i}"))

    current_step += 1
    progress_bar = create_progress_bar(current_step, total_steps)
    await safe_edit_message(progress_msg, f"üìö –°–æ–∑–¥–∞–Ω–∏–µ –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è...\n{progress_bar}")
    
    book.spine = spine
    book.toc = toc
    book.add_item(epub.EpubNcx())
    book.add_item(epub.EpubNav())
    
    current_step += 1
    progress_bar = create_progress_bar(current_step, total_steps)
    await safe_edit_message(progress_msg, f"üìö –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ EPUB...\n{progress_bar}")
    
    epub.write_epub(output_path, book)
    
    current_step += 1
    progress_bar = create_progress_bar(current_step, total_steps)
    await safe_edit_message(progress_msg, f"üìö –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ...\n{progress_bar}")

# –£–õ–£–ß–®–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≥–ª–∞–≤ –∏–∑ FB2
async def extract_chapters_from_fb2_async(fb2_path, event):
    """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≥–ª–∞–≤ –∏–∑ FB2 —Ñ–∞–π–ª–∞"""
    progress_msg = await event.respond("üìñ –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã FB2...\n‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 0%")
    
    try:
        ns = {'fb2': 'http://www.gribuser.ru/xml/fictionbook/2.0'}
        tree = etree.parse(fb2_path)
        root = tree.getroot()
        
        await safe_edit_message(progress_msg, "üìñ –ü–æ–∏—Å–∫ –≥–ª–∞–≤ –≤ FB2...\n‚ñì‚ñì‚ñì‚ñì‚ñì‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 25%")
        
        chapters = []
        
        # –ú–µ—Ç–æ–¥ 1: –ò—â–µ–º —Å–µ–∫—Ü–∏–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        sections = root.xpath('//fb2:section[fb2:title]', namespaces=ns)
        
        # –ú–µ—Ç–æ–¥ 2: –ï—Å–ª–∏ —Å–µ–∫—Ü–∏–π –º–∞–ª–æ, –∏—â–µ–º –≤—Å–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã —Å –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏ –≥–ª–∞–≤
        if len(sections) < 3:
            await safe_edit_message(progress_msg, "üîç –ì–ª—É–±–æ–∫–∏–π –ø–æ–∏—Å–∫ –≥–ª–∞–≤...\n‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 40%")
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            all_paragraphs = root.xpath('//fb2:p', namespaces=ns)
            current_chapter = None
            current_content = []
            chapter_num = 0
            
            for para in all_paragraphs:
                text = ''.join(para.itertext()).strip()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –≥–ª–∞–≤—ã
                if text and CHAPTER_RE.match(text):
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –≥–ª–∞–≤—É
                    if current_chapter and current_content:
                        # –°–æ–∑–¥–∞–µ–º XML —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤—ã
                        section_xml = f'<section xmlns="{ns["fb2"]}">'
                        section_xml += f'<title><p>{current_chapter}</p></title>'
                        section_xml += ''.join(current_content)
                        section_xml += '</section>'
                        
                        chapters.append((chapter_num, current_chapter, section_xml))
                    
                    # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –≥–ª–∞–≤—É
                    current_chapter = text
                    num_match = re.search(r'\d+', text)
                    chapter_num = int(num_match.group()) if num_match else chapter_num + 1
                    current_content = []
                elif current_chapter:
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ –∫ —Ç–µ–∫—É—â–µ–π –≥–ª–∞–≤–µ
                    para_str = etree.tostring(para, encoding='unicode', pretty_print=True)
                    current_content.append(para_str)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≥–ª–∞–≤—É
            if current_chapter and current_content:
                section_xml = f'<section xmlns="{ns["fb2"]}">'
                section_xml += f'<title><p>{current_chapter}</p></title>'
                section_xml += ''.join(current_content)
                section_xml += '</section>'
                
                chapters.append((chapter_num, current_chapter, section_xml))
        
        else:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
            total = len(sections)
            
            for idx, section in enumerate(sections):
                if idx % 5 == 0:
                    progress = 25 + int((idx / total) * 50)
                    progress_bar = "‚ñì" * (progress // 5) + "‚ñë" * (20 - progress // 5)
                    await safe_edit_message(progress_msg, f"üìñ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ–∫—Ü–∏–π...\n{progress_bar} {progress}%")
                
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                title_elem = section.find('.//fb2:title', namespaces=ns)
                if title_elem is not None:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞, —É—á–∏—Ç—ã–≤–∞—è –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                    title_text = ' '.join(title_elem.itertext()).strip()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–æ–º–µ—Ä–æ–º
                    if title_text and (len(title_text) > 2 or not title_text.isdigit()):
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–µ–∫—Ü–∏–∏
                        content = etree.tostring(section, encoding='unicode', pretty_print=True)
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –≥–ª–∞–≤—ã –µ—Å–ª–∏ –µ—Å—Ç—å
                        num_match = re.search(r'\d+', title_text)
                        num = int(num_match.group()) if num_match else idx
                        
                        chapters.append((num, title_text, content))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
        if len(chapters) < 3:
            await safe_edit_message(progress_msg, "üîç –ü–æ–∏—Å–∫ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –≥–ª–∞–≤...\n‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 65%")
            
            # –ò—â–µ–º —Å–µ–∫—Ü–∏–∏ –≤–Ω—É—Ç—Ä–∏ body
            body_sections = root.xpath('//fb2:body/fb2:section', namespaces=ns)
            for section in body_sections:
                # –ò—â–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
                nested_sections = section.xpath('.//fb2:section[fb2:title]', namespaces=ns)
                
                for nested in nested_sections:
                    title_elem = nested.find('.//fb2:title', namespaces=ns)
                    if title_elem is not None:
                        title_text = ' '.join(title_elem.itertext()).strip()
                        
                        if title_text and CHAPTER_RE.match(title_text):
                            content = etree.tostring(nested, encoding='unicode', pretty_print=True)
                            num_match = re.search(r'\d+', title_text)
                            num = int(num_match.group()) if num_match else len(chapters)
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–∞ –≥–ª–∞–≤–∞ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞
                            if not any(ch[1] == title_text for ch in chapters):
                                chapters.append((num, title_text, content))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤—ã –ø–æ –Ω–æ–º–µ—Ä–∞–º
        chapters.sort(key=lambda x: x[0])
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        unique_chapters = []
        seen_titles = set()
        for num, title, content in chapters:
            if title not in seen_titles:
                unique_chapters.append((num, title, content))
                seen_titles.add(title)
        
        await safe_edit_message(progress_msg, f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≥–ª–∞–≤: {len(unique_chapters)}\n‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì 100%")
        await asyncio.sleep(1)
        await progress_msg.delete()
        last_message_text.pop(progress_msg.id, None)
        
        return unique_chapters
        
    except Exception as e:
        logging.error(f"Error parsing FB2: {e}")
        await safe_edit_message(progress_msg, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ FB2: {e}")
        await asyncio.sleep(3)
        await progress_msg.delete()
        return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è FB2 —Å –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ–º
async def build_fb2_with_toc_async(title, chapters, output_path, progress_msg):
    """–°–æ–∑–¥–∞–µ—Ç FB2 —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ–º"""
    ns = {'fb2': 'http://www.gribuser.ru/xml/fictionbook/2.0'}
    
    root = etree.Element('{http://www.gribuser.ru/xml/fictionbook/2.0}FictionBook', 
                        nsmap={None: ns['fb2']})
    root.set('{http://www.w3.org/2001/XMLSchema-instance}schemaLocation', 
             'http://www.gribuser.ru/xml/fictionbook/2.0 http://www.gribuser.ru/xml/fictionbook/2.0/FictionBook2.xsd')
    
    description = etree.SubElement(root, 'description')
    title_info = etree.SubElement(description, 'title-info')
    etree.SubElement(title_info, 'book-title').text = title
    etree.SubElement(title_info, 'lang').text = 'ru'
    
    body = etree.SubElement(root, 'body')
    
    total = len(chapters)
    
    for idx, (num, chapter_title, content) in enumerate(chapters):
        progress = int((idx / total) * 100)
        progress_bar = create_progress_bar(idx, total)
        await safe_edit_message(progress_msg, f"üìö –°–±–æ—Ä–∫–∞ FB2...\n{progress_bar}")
        
        try:
            content = content.replace('<?xml version="1.0" encoding="utf-8"?>', '')
            section = etree.fromstring(content)
            for elem in section.iter():
                elem.tag = elem.tag.split('}')[-1] if '}' in elem.tag else elem.tag
            body.append(section)
        except Exception as e:
            logging.error(f"Could not parse chapter content: {e}")
            section = etree.SubElement(body, 'section')
            section_title = etree.SubElement(section, 'title')
            p = etree.SubElement(section_title, 'p')
            p.text = chapter_title
    
    await safe_edit_message(progress_msg, "üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ FB2...\n‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì 100%")
    tree = etree.ElementTree(root)
    tree.write(output_path, encoding='utf-8', xml_declaration=True, pretty_print=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≥–ª–∞–≤ –∏–∑ DOCX
async def extract_chapters_from_docx_async(docx_path, event):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≥–ª–∞–≤—ã –∏–∑ DOCX —Ñ–∞–π–ª–∞ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º"""
    progress_msg = await event.respond("üìñ –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã DOCX...\n‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 0%")
    
    try:
        doc = Document(docx_path)
        chapters = []
        current_chapter = None
        current_content = []
        
        total = len(doc.paragraphs)
        
        for idx, para in enumerate(doc.paragraphs):
            if idx % 20 == 0:
                progress = int((idx / total) * 75)
                progress_bar = create_progress_bar(idx, total)
                await safe_edit_message(progress_msg, f"üìñ –ê–Ω–∞–ª–∏–∑ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤...\n{progress_bar}")
            
            text = para.text.strip()
            if text and (para.style.name.startswith('Heading') or CHAPTER_RE.match(text)):
                if current_chapter and current_content:
                    num_match = re.search(r'\d+', current_chapter)
                    num = int(num_match.group()) if num_match else len(chapters)
                    chapters.append((num, current_chapter, '\n'.join(current_content)))
                
                current_chapter = text
                current_content = []
            elif current_chapter and text:
                current_content.append(text)
        
        if current_chapter and current_content:
            num_match = re.search(r'\d+', current_chapter)
            num = int(num_match.group()) if num_match else len(chapters)
            chapters.append((num, current_chapter, '\n'.join(current_content)))
        
        await safe_edit_message(progress_msg, f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≥–ª–∞–≤: {len(chapters)}\n‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì 100%")
        await asyncio.sleep(1)
        await progress_msg.delete()
        last_message_text.pop(progress_msg.id, None)
        
        return chapters
        
    except Exception as e:
        logging.error(f"Error parsing DOCX: {e}")
        await safe_edit_message(progress_msg, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ DOCX: {e}")
        await asyncio.sleep(3)
        await progress_msg.delete()
        return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è DOCX —Å –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ–º
async def build_docx_with_toc_async(title, chapters, output_path, progress_msg):
    """–°–æ–∑–¥–∞–µ—Ç DOCX —Ñ–∞–π–ª —Å –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ–º"""
    doc = Document()
    
    doc.add_heading(title, 0)
    doc.add_heading('–û–≥–ª–∞–≤–ª–µ–Ω–∏–µ', 1)
    
    total_steps = len(chapters) * 2 + 2
    current_step = 0
    
    for num, chapter_title, _ in sorted(chapters, key=lambda x: x[0]):
        current_step += 1
        progress_bar = create_progress_bar(current_step, total_steps)
        await safe_edit_message(progress_msg, f"üìö –°–æ–∑–¥–∞–Ω–∏–µ –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è...\n{progress_bar}")
        
        doc.add_paragraph(f"{num + 1}. {chapter_title}", style='List Number')
    
    doc.add_page_break()
    
    for num, chapter_title, content in sorted(chapters, key=lambda x: x[0]):
        current_step += 1
        progress_bar = create_progress_bar(current_step, total_steps)
        await safe_edit_message(progress_msg, f"üìö –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤...\n{progress_bar}")
        
        doc.add_heading(chapter_title, 1)
        
        paragraphs = content.split('\n')
        for paragraph in paragraphs:
            if paragraph.strip():
                doc.add_paragraph(paragraph)
    
    current_step += 1
    progress_bar = create_progress_bar(current_step, total_steps)
    await safe_edit_message(progress_msg, f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ DOCX...\n{progress_bar}")
    
    doc.save(output_path)

# –§—É–Ω–∫—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –ø–æ—á–∏–Ω–∫–∏

async def process_fb2_fix(event, user_id, filename, filepath):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø–æ—á–∏–Ω–∫–∞ FB2"""
    report = "üìã –û—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ—Ä–∫–µ FB2:\n\n"
    fixed_issues = []
    
    progress_msg = await event.respond("üîß –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã FB2...\n‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 0%")
    
    try:
        ns = {'fb2': 'http://www.gribuser.ru/xml/fictionbook/2.0'}
        tree = etree.parse(filepath)
        root = tree.getroot()
        
        await safe_edit_message(progress_msg, "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...\n‚ñì‚ñì‚ñì‚ñì‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 20%")
        
        if not root.find('.//fb2:description', namespaces=ns):
            report += "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç description\n"
            description = etree.SubElement(root, '{%s}description' % ns['fb2'])
            title_info = etree.SubElement(description, '{%s}title-info' % ns['fb2'])
            etree.SubElement(title_info, '{%s}book-title' % ns['fb2']).text = "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            etree.SubElement(title_info, '{%s}lang' % ns['fb2']).text = "ru"
            fixed_issues.append("–î–æ–±–∞–≤–ª–µ–Ω —ç–ª–µ–º–µ–Ω—Ç description")
        
        await safe_edit_message(progress_msg, "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...\n‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 40%")
        
        image_refs = root.xpath('//fb2:image', namespaces=ns)
        binaries = {b.get('id'): b for b in root.xpath('//fb2:binary', namespaces=ns)}
        
        broken_images = 0
        for img in image_refs:
            href = img.get('{http://www.w3.org/1999/xlink}href')
            if href and href.startswith('#'):
                binary_id = href[1:]
                if binary_id not in binaries:
                    img.getparent().remove(img)
                    broken_images += 1
        
        if broken_images > 0:
            report += f"üñºÔ∏è –£–¥–∞–ª–µ–Ω–æ –±–∏—Ç—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {broken_images}\n"
            fixed_issues.append(f"–£–¥–∞–ª–µ–Ω–æ {broken_images} –±–∏—Ç—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        await safe_edit_message(progress_msg, "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤...\n‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 60%")
        
        empty_elements = 0
        for elem in root.xpath('.//*', namespaces=ns):
            if elem.tag.endswith('p') and not elem.text and not elem.tail and len(elem) == 0:
                elem.getparent().remove(elem)
                empty_elements += 1
        
        if empty_elements > 0:
            report += f"üìÑ –£–¥–∞–ª–µ–Ω–æ –ø—É—Å—Ç—ã—Ö –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤: {empty_elements}\n"
            fixed_issues.append(f"–£–¥–∞–ª–µ–Ω–æ {empty_elements} –ø—É—Å—Ç—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        await safe_edit_message(progress_msg, "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏...\n‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñë‚ñë‚ñë‚ñë 80%")
        
        for elem in root.xpath('.//*', namespaces=ns):
            if elem.text:
                elem.text = elem.text.replace('–†–Ü', '–≤').replace('–≤–Ç"', '‚Äî').replace('–≤–Ç‚Ñ¢', ''')
            if elem.tail:
                elem.tail = elem.tail.replace('–†–Ü', '–≤').replace('–≤–Ç"', '‚Äî').replace('–≤–Ç‚Ñ¢', ''')
        
        await safe_edit_message(progress_msg, "üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞...")
        
        if fixed_issues:
            base, ext = os.path.splitext(filename)
            out_path = os.path.join(tempfile.gettempdir(), f"{base}_fixed{ext}")
            tree.write(out_path, encoding='utf-8', xml_declaration=True, pretty_print=True)
            
            report += f"\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(fixed_issues)}\n"
            report += "\n".join(f"‚Ä¢ {issue}" for issue in fixed_issues)
            
            await progress_msg.delete()
            await client.send_file(user_id, out_path, caption=report)
            os.remove(out_path)
        else:
            report += "\n‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!"
            await progress_msg.delete()
            await event.respond(report)
            
    except etree.XMLSyntaxError as e:
        await progress_msg.delete()
        await event.respond(
            f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ XML:\n{str(e)}\n\n"
            "–§–∞–π–ª —Å–µ—Ä—å–µ–∑–Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏ —Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
        )
    except Exception as e:
        await progress_msg.delete()
        await event.respond(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")

async def process_docx_fix(event, user_id, filename, filepath):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø–æ—á–∏–Ω–∫–∞ DOCX"""
    report = "üìã –û—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ—Ä–∫–µ DOCX:\n\n"
    fixed_issues = []
    
    progress_msg = await event.respond("üîß –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ DOCX...\n‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 0%")
    
    try:
        doc = Document(filepath)
        
        await safe_edit_message(progress_msg, "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç—ã—Ö –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤...\n‚ñì‚ñì‚ñì‚ñì‚ñì‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 25%")
        
        empty_paras = 0
        paras_to_remove = []
        
        for para in doc.paragraphs:
            if not para.text.strip():
                has_images = any(run._element.xpath('.//w:drawing') for run in para.runs)
                if not has_images:
                    paras_to_remove.append(para)
                    empty_paras += 1
        
        for para in paras_to_remove:
            p = para._element
            p.getparent().remove(p)
        
        if empty_paras > 0:
            report += f"üìÑ –£–¥–∞–ª–µ–Ω–æ –ø—É—Å—Ç—ã—Ö –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤: {empty_paras}\n"
            fixed_issues.append(f"–£–¥–∞–ª–µ–Ω–æ {empty_paras} –ø—É—Å—Ç—ã—Ö –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤")
        
        await safe_edit_message(progress_msg, "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª–µ–π...\n‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 50%")
        
        fixed_styles = 0
        for para in doc.paragraphs:
            if para.style is None or para.style.name == 'Normal':
                if CHAPTER_RE.match(para.text):
                    para.style = 'Heading 1'
                    fixed_styles += 1
        
        if fixed_styles > 0:
            report += f"üé® –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ç–∏–ª–µ–π –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {fixed_styles}\n"
            fixed_issues.append(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {fixed_styles} —Å—Ç–∏–ª–µ–π")
        
        await safe_edit_message(progress_msg, "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...\n‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñë‚ñë‚ñë‚ñë‚ñë 75%")
        
        broken_images = 0
        for shape in doc.inline_shapes:
            try:
                _ = shape._inline.graphic.graphicData
            except:
                broken_images += 1
        
        if broken_images > 0:
            report += f"üñºÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –±–∏—Ç—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {broken_images}\n"
        
        await safe_edit_message(progress_msg, "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–æ–≤...\n‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì 100%")
        
        total_paras = len(doc.paragraphs)
        total_tables = len(doc.tables)
        total_sections = len(doc.sections)
        
        report += f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞:\n"
        report += f"‚Ä¢ –ü–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤: {total_paras}\n"
        report += f"‚Ä¢ –¢–∞–±–ª–∏—Ü: {total_tables}\n"
        report += f"‚Ä¢ –°–µ–∫—Ü–∏–π: {total_sections}\n"
        
        if fixed_issues:
            base, ext = os.path.splitext(filename)
            out_path = os.path.join(tempfile.gettempdir(), f"{base}_fixed{ext}")
            doc.save(out_path)
            
            report += f"\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(fixed_issues)}\n"
            report += "\n".join(f"‚Ä¢ {issue}" for issue in fixed_issues)
            
            await progress_msg.delete()
            await client.send_file(user_id, out_path, caption=report)
            os.remove(out_path)
        else:
            report += "\n‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!"
            await progress_msg.delete()
            await event.respond(report)
            
    except Exception as e:
        await progress_msg.delete()
        await event.respond(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")

async def process_epub_fix(event, user_id, filename, filepath):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø–æ—á–∏–Ω–∫–∞ EPUB"""
    report = "üìã –û—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ—Ä–∫–µ EPUB:\n\n"
    fixed_issues = []
    
    progress_msg = await event.respond("üîß –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã EPUB...\n‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 0%")
    
    try:
        book = epub.read_epub(filepath)
        
        await safe_edit_message(progress_msg, "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...\n‚ñì‚ñì‚ñì‚ñì‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 20%")
        
        if not book.get_metadata('DC', 'title'):
            book.set_title('–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            fixed_issues.append("–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏")
            
        if not book.get_metadata('DC', 'language'):
            book.set_language('ru')
            fixed_issues.append("–î–æ–±–∞–≤–ª–µ–Ω —è–∑—ã–∫")
            
        if not book.get_metadata('DC', 'identifier'):
            book.set_identifier(f'urn:uuid:{os.urandom(16).hex()}')
            fixed_issues.append("–î–æ–±–∞–≤–ª–µ–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä")
        
        await safe_edit_message(progress_msg, "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...\n‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 40%")
        
        images = list(book.get_items_of_type(ebooklib.ITEM_IMAGE))
        broken_images = []
        
        for img in images:
            try:
                Image.open(io.BytesIO(img.content))
            except:
                broken_images.append(img)
        
        if broken_images:
            for img in broken_images:
                book.items.remove(img)
            report += f"üñºÔ∏è –£–¥–∞–ª–µ–Ω–æ –±–∏—Ç—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(broken_images)}\n"
            fixed_issues.append(f"–£–¥–∞–ª–µ–Ω–æ {len(broken_images)} –±–∏—Ç—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        await safe_edit_message(progress_msg, "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ HTML –∫–æ–Ω—Ç–µ–Ω—Ç–∞...\n‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 60%")
        
        documents = list(book.get_items_of_type(ebooklib.ITEM_DOCUMENT))
        fixed_html = 0
        
        for item in documents:
            try:
                content = item.get_content().decode('utf-8')
                soup = BeautifulSoup(content, 'html.parser')
                
                for tag in soup.find_all(['h1', 'h2', 'h3', 'h4', 'h5', 'h6']):
                    if not tag.get_text(strip=True):
                        tag.decompose()
                        fixed_html += 1
                
                for img in soup.find_all('img'):
                    src = img.get('src')
                    if src:
                        img_name = os.path.basename(src)
                        if not any(i.file_name.endswith(img_name) for i in images):
                            img.decompose()
                            fixed_html += 1
                
                item.set_content(str(soup).encode('utf-8'))
                
            except Exception as e:
                report += f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ {item.file_name}: {str(e)}\n"
        
        if fixed_html > 0:
            report += f"üìÑ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ HTML —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {fixed_html}\n"
            fixed_issues.append(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {fixed_html} HTML —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        await safe_edit_message(progress_msg, "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...\n‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñë‚ñë‚ñë‚ñë 80%")
        
        spine_items = []
        for item_id, linear in book.spine:
            try:
                item = book.get_item_with_id(item_id)
                if item:
                    spine_items.append((item_id, linear))
            except:
                fixed_issues.append(f"–£–¥–∞–ª–µ–Ω–∞ –±–∏—Ç–∞—è —Å—Å—ã–ª–∫–∞ –∏–∑ spine: {item_id}")
        
        book.spine = spine_items
        
        report += f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ EPUB:\n"
        report += f"‚Ä¢ HTML —Ñ–∞–π–ª–æ–≤: {len(documents)}\n"
        report += f"‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(images) - len(broken_images)}\n"
        report += f"‚Ä¢ –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ spine: {len(spine_items)}\n"
        
        if fixed_issues:
            await safe_edit_message(progress_msg, "üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ EPUB...")
            base, ext = os.path.splitext(filename)
            out_path = os.path.join(tempfile.gettempdir(), f"{base}_fixed{ext}")
            epub.write_epub(out_path, book)
            
            report += f"\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(fixed_issues)}\n"
            report += "\n".join(f"‚Ä¢ {issue}" for issue in fixed_issues)
            
            await progress_msg.delete()
            await client.send_file(user_id, out_path, caption=report)
            os.remove(out_path)
        else:
            report += "\n‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!"
            await progress_msg.delete()
            await event.respond(report)
            
    except Exception as e:
        await progress_msg.delete()
        await event.respond(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")

# –ó–∞–ø—É—Å–∫
client.start()
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
print("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤: —Å—Ç—Ä–æ–≥–æ –ø–æ –æ—á–µ—Ä–µ–¥–∏")
client.run_until_disconnected()
