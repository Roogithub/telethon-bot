import os
import re
import io
import zipfile
import tempfile
import base64
import logging
import warnings
import asyncio

from telethon import TelegramClient, events, Button
from telethon.errors import MessageNotModifiedError
from ebooklib import epub
from bs4 import BeautifulSoup, XMLParsedAsHTMLWarning
from PIL import Image
from lxml import etree
from docx import Document

warnings.filterwarnings("ignore", category=XMLParsedAsHTMLWarning)
logging.basicConfig(level=logging.INFO)

api_id = 24519852
api_hash = '2186f59fdf9c2ad4e7ddf0deb250ff0c'
client = TelegramClient('unified_bot', api_id, api_hash)

RESOLUTIONS = {
    '–£–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è': None,
    '64p': (64, 64),
    '144p': (256, 144),
    '360p': (640, 360),
    '480p': (854, 480),
    '720p': (1280, 720),
    '1080p': (1920, 1080)
}

user_files = {}
user_mode = {}
last_message_text = {}

# –ù–æ–≤–æ–µ, –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥–ª–∞–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
CHAPTER_RE = re.compile(
    r"(?i)^\s*("
    r"–ì–ª–∞–≤–∞|chapter|—á–∞—Å—Ç—å|–ø—Ä–æ–ª–æ–≥|–∞–Ω–Ω–æ—Ç–∞—Ü–∏—è|annotation|–æ–ø–∏—Å–∞–Ω–∏–µ|–ø—Ä–µ–¥–∏—Å–ª–æ–≤–∏–µ –æ—Ç –∞–≤—Ç–æ—Ä–∞"
    r")", re.IGNORECASE
)


def create_progress_bar(current, total, width=20):
    if total == 0:
        return "‚ñì" * width + " 100%"
    progress = int((current / total) * width)
    bar = "‚ñì" * progress + "‚ñë" * (width - progress)
    percentage = int((current / total) * 100)
    return f"{bar} {percentage}%"

def should_update_progress(current, total, last_updated_percent):
    if total == 0:
        return True
    current_percent = int((current / total) * 100)
    return current_percent - last_updated_percent >= 5

async def safe_edit_message(message, new_text):
    try:
        message_id = message.id
        if message_id not in last_message_text or last_message_text[message_id] != new_text:
            await message.edit(new_text)
            last_message_text[message_id] = new_text
    except MessageNotModifiedError:
        pass
    except Exception as e:
        logging.error(f"Error editing message: {e}")

@client.on(events.NewMessage(pattern='/start'))
async def start(event):
    await event.respond(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ê–¥–∏–∫–∏—è ‚Äî –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏.\n\n"
        "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "‚Ä¢ –°–∂–∞—Ç–∏–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ .epub, .fb2, .docx\n"
        "‚Ä¢ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≥–ª–∞–≤ –∏–∑ EPUB, FB2, DOCX –∏ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ —Å –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ–º\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    )

@client.on(events.NewMessage(pattern='/help'))
async def help_command(event):
    await event.respond(
        "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n"
        "/start    - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help     - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/compress - –°–∂–∞—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ .epub/.fb2/.docx\n"
        "/extract  - –ò–∑–≤–ª–µ—á—å –≥–ª–∞–≤—ã –∏ –ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å —Å –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ–º\n"
        "/cancel   - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n"
    )

@client.on(events.NewMessage(pattern='/cancel'))
async def cancel(event):
    user_id = event.sender_id
    user_files.pop(user_id, None)
    user_mode.pop(user_id, None)
    await event.respond("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")

@client.on(events.NewMessage(pattern='/compress'))
async def compress_cmd(event):
    user_mode[event.sender_id] = 'compress'
    await event.respond("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª .epub, .fb2 –∏–ª–∏ .docx –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")

@client.on(events.NewMessage(pattern='/extract'))
async def extract_cmd(event):
    user_mode[event.sender_id] = 'extract'
    await event.respond("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª .epub, .fb2 –∏–ª–∏ .docx. –Ø –∏–∑–≤–ª–µ–∫—É –≥–ª–∞–≤—ã –∏ –ø–µ—Ä–µ—Å–æ–±–µ—Ä—É –µ–≥–æ —Å –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ–º.")

@client.on(events.NewMessage(incoming=True))
async def handle_file(event):
    if not event.file:
        return
    user_id = event.sender_id
    mode = user_mode.get(user_id)
    if not mode:
        return

    filename = event.file.name or ''
    ext = os.path.splitext(filename)[1].lower()

    progress_msg = await event.respond("üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞...")
    file_data = io.BytesIO()
    await client.download_media(event.message, file=file_data)
    file_data.seek(0)
    
    with tempfile.NamedTemporaryFile(delete=False, suffix=ext) as tmp:
        tmp.write(file_data.read())
        tmp_path = tmp.name
    
    user_files[user_id] = (filename, tmp_path)
    await progress_msg.delete()

    if mode == 'compress' and ext in ['.epub', '.fb2', '.docx']:
        buttons = [Button.inline(label, data=label.encode()) for label in RESOLUTIONS]
        await event.respond("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:", buttons=buttons)

    elif mode == 'extract' and ext in ['.epub', '.fb2', '.docx']:
        await event.respond("–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
        try:
            output_path = None
            caption = "–§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω."
            base = os.path.splitext(filename)[0]

            if ext == '.epub':
                chapters, images = await extract_chapters_from_epub_async(tmp_path, event)
                if not chapters:
                    await event.respond("–ì–ª–∞–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                    return
                output_path = os.path.join(tempfile.gettempdir(), f"{base}_converted.epub")
                build_progress = await event.respond("üìö –°–±–æ—Ä–∫–∞ EPUB...")
                await build_epub_async(base, chapters, images, output_path, build_progress)
                caption = "‚úÖ EPUB –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω —Å –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ–º."

            elif ext == '.fb2':
                chapters = await extract_chapters_from_fb2_async(tmp_path, event)
                if not chapters:
                    await event.respond("–ì–ª–∞–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ FB2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ —Ñ–∞–π–ª–µ –µ—Å—Ç—å —Ç–µ–≥–∏ <section> —Å <title>.")
                    return
                output_path = os.path.join(tempfile.gettempdir(), f"{base}_converted.fb2")
                build_progress = await event.respond("üìö –°–±–æ—Ä–∫–∞ FB2...")
                await build_fb2_with_toc_async(base, chapters, output_path, build_progress)
                caption = "‚úÖ FB2 –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω —Å –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ–º."

            elif ext == '.docx':
                chapters = await extract_chapters_from_docx_async(tmp_path, event)
                if not chapters:
                    await event.respond("–ì–ª–∞–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ DOCX. –ü–æ–∏—Å–∫ –≤–µ–¥–µ—Ç—Å—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ –Ω–∞—á–∞–ª–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞.")
                    return
                output_path = os.path.join(tempfile.gettempdir(), f"{base}_converted.docx")
                build_progress = await event.respond("üìö –°–±–æ—Ä–∫–∞ DOCX...")
                await build_docx_with_toc_async(base, chapters, output_path, build_progress)
                caption = "‚úÖ DOCX –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω —Å –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ–º."
            
            if output_path and os.path.exists(output_path):
                await build_progress.delete()
                await client.send_file(user_id, output_path, caption=caption)
                os.remove(output_path)
                
        except Exception as e:
            logging.error(f"Error processing file for extraction: {e}", exc_info=True)
            await event.respond(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        finally:
            if os.path.exists(tmp_path):
                os.remove(tmp_path)
            user_mode.pop(user_id, None)
            user_files.pop(user_id, None)

@client.on(events.CallbackQuery)
async def handle_button(event):
    user_id = event.sender_id
    mode = user_mode.get(user_id)
    if not mode: return

    data = event.data.decode()
    filename, filepath = user_files.get(user_id, (None, None))
    if not filename or not os.path.exists(filepath):
        await event.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", alert=True)
        return

    ext = os.path.splitext(filename)[1].lower()

    if mode == 'compress':
        resolution = RESOLUTIONS.get(data)
        await event.edit(f"‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ {filename}...")
        try:
            if ext == '.fb2':
                await process_fb2(event, user_id, filename, filepath, resolution)
            elif ext == '.docx':
                await process_docx(event, user_id, filename, filepath, resolution)
            elif ext == '.epub':
                await process_epub_compression(event, user_id, filename, filepath, resolution)
        except Exception as e:
            logging.error(f"Error during compression: {e}", exc_info=True)
            await event.edit(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏: {e}")
        finally:
            if os.path.exists(filepath):
                os.remove(filepath)
            user_files.pop(user_id, None)
            user_mode.pop(user_id, None)

# ... (–ö–æ–¥ —Ñ—É–Ω–∫—Ü–∏–π —Å–∂–∞—Ç–∏—è process_fb2, process_docx, process_epub_compression –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

async def process_fb2(event, user_id, filename, filepath, resolution):
    ns = {'fb2': 'http://www.gribuser.ru/xml/fictionbook/2.0'}
    tree = etree.parse(filepath)
    root = tree.getroot()
    binaries = root.xpath('//fb2:binary', namespaces=ns)
    changed = deleted = 0
    image_binaries = [b for b in binaries if 'image' in (b.get('content-type') or '')]
    total = len(image_binaries)
    if total == 0:
        await event.edit("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ.")
        return
    progress_msg = await event.respond(f"üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π FB2...")
    for current, binary in enumerate(image_binaries, 1):
        if resolution is None:
            root.remove(binary)
            deleted += 1
        else:
            try:
                img = Image.open(io.BytesIO(base64.b64decode(binary.text))).convert('RGB')
                img.thumbnail(resolution, Image.Resampling.LANCZOS)
                buf = io.BytesIO()
                img.save(buf, format='JPEG', quality=30)
                binary.text = base64.b64encode(buf.getvalue()).decode()
                binary.set('content-type', 'image/jpeg')
                changed += 1
            except Exception:
                continue
    await safe_edit_message(progress_msg, "üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞...")
    base, ext = os.path.splitext(filename)
    out_path = os.path.join(tempfile.gettempdir(), f"{base}_compressed{ext}")
    tree.write(out_path, encoding='utf-8', xml_declaration=True)
    await progress_msg.delete()
    await client.send_file(user_id, out_path, caption=f"‚úÖ –ì–æ—Ç–æ–≤–æ: —Å–∂–∞—Ç–æ {changed}, —É–¥–∞–ª–µ–Ω–æ {deleted}")
    os.remove(out_path)

async def process_docx(event, user_id, filename, filepath, resolution):
    doc = Document(filepath)
    changed = deleted = 0
    total = len(doc.inline_shapes)
    if total == 0:
        await event.edit("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ.")
        return
    progress_msg = await event.respond(f"üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π DOCX...")
    if resolution is None:
        for shape in doc.inline_shapes:
            try:
                shape._element.getparent().remove(shape._element)
                deleted += 1
            except Exception: continue
    else:
        for shape in doc.inline_shapes:
            try:
                r_id = shape._inline.graphic.graphicData.pic.blipFill.blip.embed
                img_part = doc.part.related_parts[r_id]
                img = Image.open(io.BytesIO(img_part.blob)).convert('RGB')
                img.thumbnail(resolution, Image.Resampling.LANCZOS)
                buf = io.BytesIO()
                img.save(buf, format='JPEG', quality=30)
                img_part._blob = buf.getvalue()
                changed += 1
            except Exception: continue
    await safe_edit_message(progress_msg, "üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
    base, ext = os.path.splitext(filename)
    out_path = os.path.join(tempfile.gettempdir(), f"{base}_compressed{ext}")
    doc.save(out_path)
    await progress_msg.delete()
    await client.send_file(user_id, out_path, caption=f"‚úÖ –ì–æ—Ç–æ–≤–æ: —Å–∂–∞—Ç–æ {changed}, —É–¥–∞–ª–µ–Ω–æ {deleted}")
    os.remove(out_path)

async def process_epub_compression(event, user_id, filename, filepath, resolution):
    book = epub.read_epub(filepath)
    changed = deleted = 0
    images = [item for item in list(book.get_items()) if item.media_type and item.media_type.startswith("image/")]
    total = len(images)
    if total == 0:
        await event.edit("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ EPUB.")
        return
    progress_msg = await event.respond(f"üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π EPUB...")
    for item in images:
        if resolution is None:
            book.items.remove(item)
            deleted += 1
        else:
            try:
                img = Image.open(io.BytesIO(item.content)).convert("RGB")
                img.thumbnail(resolution, Image.Resampling.LANCZOS)
                buf = io.BytesIO()
                img.save(buf, format="JPEG", quality=30)
                item.content = buf.getvalue()
                item.media_type = "image/jpeg"
                changed += 1
            except Exception: continue
    await safe_edit_message(progress_msg, "üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ EPUB...")
    base, ext = os.path.splitext(filename)
    out_path = os.path.join(tempfile.gettempdir(), f"{base}_compressed{ext}")
    epub.write_epub(out_path, book)
    await progress_msg.delete()
    await client.send_file(user_id, out_path, caption=f"‚úÖ –ì–æ—Ç–æ–≤–æ: —Å–∂–∞—Ç–æ {changed}, —É–¥–∞–ª–µ–Ω–æ {deleted}")
    os.remove(out_path)
    
# ... (–§—É–Ω–∫—Ü–∏—è extract_chapters_from_epub_async –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
async def extract_chapters_from_epub_async(epub_path, event):
    # ... (—Å—Ç–∞—Ä—ã–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    return result, images

async def build_epub_async(title, chapters, image_paths, output_path, progress_msg):
    # ... (—Å—Ç–∞—Ä—ã–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    pass

# ---- –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò ----

async def extract_chapters_from_fb2_async(fb2_path, event):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≥–ª–∞–≤—ã –∏–∑ FB2, —Å—á–∏—Ç–∞—è –∫–∞–∂–¥—É—é —Å–µ–∫—Ü–∏—é —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –≥–ª–∞–≤–æ–π."""
    await safe_edit_message(event, "üìñ –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã FB2...")
    ns = {'fb2': 'http://www.gribuser.ru/xml/fictionbook/2.0'}
    tree = etree.parse(fb2_path)
    root = tree.getroot()
    
    chapters = []
    # –ò—â–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫
    sections = root.xpath('//fb2:section[fb2:title]', namespaces=ns)
    
    for idx, section in enumerate(sections):
        title_elem = section.find('fb2:title', namespaces=ns)
        if title_elem is not None:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞
            title_text = ' '.join(title_elem.itertext()).strip()
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–µ–∫—Ü–∏–∏ –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
            content = etree.tostring(section, encoding='unicode', method='xml')
            chapters.append((idx, title_text, content))
            
    await event.edit(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≥–ª–∞–≤ –≤ FB2: {len(chapters)}")
    await asyncio.sleep(1)
    return chapters

async def build_fb2_with_toc_async(title, chapters, output_path, progress_msg):
    """–°–æ–±–∏—Ä–∞–µ—Ç FB2 –∏–∑ –≥–æ—Ç–æ–≤—ã—Ö —Å–µ–∫—Ü–∏–π-–≥–ª–∞–≤."""
    await safe_edit_message(progress_msg, "üìö –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã FB2...")
    nsmap = {'fb2': 'http://www.gribuser.ru/xml/fictionbook/2.0'}
    root = etree.Element('FictionBook', nsmap=nsmap)
    
    description = etree.SubElement(root, 'description')
    title_info = etree.SubElement(description, 'title-info')
    etree.SubElement(title_info, 'book-title').text = title
    etree.SubElement(title_info, 'lang').text = 'ru'
    
    body = etree.SubElement(root, 'body')
    
    for idx, (num, chapter_title, content_xml) in enumerate(chapters):
        try:
            # –ü–∞—Ä—Å–∏–º XML-—Å—Ç—Ä–æ–∫—É –≥–ª–∞–≤—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ –≤ —Ç–µ–ª–æ
            section_node = etree.fromstring(content_xml)
            body.append(section_node)
        except Exception as e:
            logging.error(f"Could not parse chapter '{chapter_title}': {e}")
            continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤—É, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –µ–µ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
            
    await safe_edit_message(progress_msg, "üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ FB2...")
    tree = etree.ElementTree(root)
    tree.write(output_path, encoding='utf-8', xml_declaration=True, pretty_print=True)

async def extract_chapters_from_docx_async(docx_path, event):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≥–ª–∞–≤—ã –∏–∑ DOCX —Ñ–∞–π–ª–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ –Ω–∞—á–∞–ª–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞."""
    await safe_edit_message(event, "üìñ –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã DOCX...")
    doc = Document(docx_path)
    chapters = []
    current_chapter_title = None
    current_content = []

    for para in doc.paragraphs:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –≥–ª–∞–≤—ã
        if CHAPTER_RE.match(para.text.strip()):
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –≥–ª–∞–≤—É
            if current_chapter_title is not None:
                chapters.append((len(chapters), current_chapter_title, "\n".join(current_content)))
                current_content = []
            
            # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –≥–ª–∞–≤—É
            current_chapter_title = para.text.strip()
        
        # –ï—Å–ª–∏ –º—ã –≤–Ω—É—Ç—Ä–∏ –≥–ª–∞–≤—ã, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        if current_chapter_title is not None:
            current_content.append(para.text)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –≥–ª–∞–≤—É
    if current_chapter_title is not None:
        chapters.append((len(chapters), current_chapter_title, "\n".join(current_content)))
        
    await event.edit(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≥–ª–∞–≤ –≤ DOCX: {len(chapters)}")
    await asyncio.sleep(1)
    return chapters

async def build_docx_with_toc_async(title, chapters, output_path, progress_msg):
    """–°–æ–∑–¥–∞–µ—Ç DOCX —Ñ–∞–π–ª —Å –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ–º –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Ä–∞–∑—Ä—ã–≤–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü."""
    doc = Document()
    doc.add_heading(title, 0)
    
    await safe_edit_message(progress_msg, "üìö –°–æ–∑–¥–∞–Ω–∏–µ –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è DOCX...")
    doc.add_heading('–û–≥–ª–∞–≤–ª–µ–Ω–∏–µ', 1)
    for num, chapter_title, _ in sorted(chapters, key=lambda x: x[0]):
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ
        doc.add_paragraph(f"{chapter_title}")
    
    await safe_edit_message(progress_msg, "üìö –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤ DOCX...")
    for num, chapter_title, content in sorted(chapters, key=lambda x: x[0]):
        doc.add_heading(chapter_title, 1)
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –≥–ª–∞–≤—ã
        for paragraph_text in content.split('\n'):
             if paragraph_text.strip(): # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
                doc.add_paragraph(paragraph_text)
                
    await safe_edit_message(progress_msg, "üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ DOCX...")
    doc.save(output_path)

# –ó–∞–ø—É—Å–∫
client.start()
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
client.run_until_disconnected()
                
