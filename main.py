import os
import re
import io
import zipfile
import tempfile
import base64
import logging
import warnings
import asyncio
import shutil  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
from collections import deque

from telethon import TelegramClient, events, Button
from telethon.errors import MessageNotModifiedError
from ebooklib import epub
from bs4 import BeautifulSoup, XMLParsedAsHTMLWarning
from PIL import Image
from lxml import etree
from docx import Document

warnings.filterwarnings("ignore", category=XMLParsedAsHTMLWarning)
logging.basicConfig(level=logging.INFO)

api_id = 24519852
api_hash = '2186f59fdf9c2ad4e7ddf0deb250ff0c'
client = TelegramClient('unified_bot', api_id, api_hash)

RESOLUTIONS = {
    '–£–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è': None,
    '64p': (64, 64),
    '144p': (256, 144),
    '360p': (640, 360),
    '480p': (854, 480),
    '720p': (1280, 720),
    '1080p': (1920, 1080)
}

user_files = {}
user_mode = {}
last_message_text = {}

# –°–∏—Å—Ç–µ–º–∞ –æ—á–µ—Ä–µ–¥–∏ - –ò–ó–ú–ï–ù–ï–ù–û –Ω–∞ 1
MAX_CONCURRENT_TASKS = 1  # –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ñ–∞–π–ª –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
active_tasks = 0
task_queue = deque()
queue_lock = asyncio.Lock()

# –ù–æ–≤–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥–ª–∞–≤
CHAPTER_RE = re.compile(
    r"(?i)^\s*("
    r"–ì–ª–∞–≤–∞|chapter|—á–∞—Å—Ç—å|–ø—Ä–æ–ª–æ–≥|–∞–Ω–Ω–æ—Ç–∞—Ü–∏—è|annotation|–æ–ø–∏—Å–∞–Ω–∏–µ|–ø—Ä–µ–¥–∏—Å–ª–æ–≤–∏–µ –æ—Ç –∞–≤—Ç–æ—Ä–∞"
    r")", re.IGNORECASE
)

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—å—é
def queue_manager(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—å—é –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    async def wrapper(*args, **kwargs):
        global active_tasks
        
        async with queue_lock:
            # –ï—Å–ª–∏ —Å–ª–æ—Ç –∑–∞–Ω—è—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
            if active_tasks >= MAX_CONCURRENT_TASKS:
                # –°–æ–∑–¥–∞–µ–º Future –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
                future = asyncio.Future()
                task_queue.append(future)
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–æ–∑–∏—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥–∏
                event = args[0]
                queue_position = len(task_queue)
                await event.respond(
                    f"‚è≥ –í–∞—à –∑–∞–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å.\n"
                    f"–ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: {queue_position}\n"
                    f"–û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏..."
                )
                
                # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–µ—Ä–µ–¥ –æ–∂–∏–¥–∞–Ω–∏–µ–º
                queue_lock.release()
                try:
                    await future
                finally:
                    await queue_lock.acquire()
            
            active_tasks += 1
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            result = await func(*args, **kwargs)
            return result
        finally:
            async with queue_lock:
                active_tasks -= 1
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥–∏, –∑–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é
                if task_queue:
                    next_task = task_queue.popleft()
                    next_task.set_result(True)
    
    return wrapper  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º wrapper, –∞ –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º –µ–≥–æ 
            

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
def create_progress_bar(current, total, width=20):
    if total == 0:
        return "‚ñì" * width + " 100%"
    progress = int((current / total) * width)
    bar = "‚ñì" * progress + "‚ñë" * (width - progress)
    percentage = int((current / total) * 100)
    return f"{bar} {percentage}%"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
def should_update_progress(current, total, last_updated_percent):
    if total == 0:
        return True
    current_percent = int((current / total) * 100)
    return current_percent - last_updated_percent >= 5

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
async def safe_edit_message(message, new_text):
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è"""
    try:
        message_id = message.id
        if message_id not in last_message_text or last_message_text[message_id] != new_text:
            await message.edit(new_text)
            last_message_text[message_id] = new_text
    except MessageNotModifiedError:
        pass
    except Exception as e:
        logging.error(f"Error editing message: {e}")

# –ö–æ–º–∞–Ω–¥—ã
@client.on(events.NewMessage(pattern='/start'))
async def start(event):
    await event.respond(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ê–¥–∏–∫–∏—è ‚Äî –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏.\n\n"
        "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "‚Ä¢ –°–∂–∞—Ç–∏–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ .epub, .fb2, .docx\n"
        "‚Ä¢ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≥–ª–∞–≤ –∏–∑ EPUB, FB2, DOCX –∏ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ —Å –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ–º\n\n"
        "‚ö†Ô∏è –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ.\n"
        "–§–∞–π–ª—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Å—Ç—Ä–æ–≥–æ –ø–æ –æ—á–µ—Ä–µ–¥–∏.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    )

@client.on(events.NewMessage(pattern='/help'))
async def help_command(event):
    await event.respond(
        "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n"
        "/start    - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help     - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/compress - –°–∂–∞—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ .epub/.fb2/.docx\n"
        "/extract  - –ò–∑–≤–ª–µ—á—å –≥–ª–∞–≤—ã –∏ –ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å —Å –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ–º\n"
        "/cancel   - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n"
        "/status   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏\n"
    )

@client.on(events.NewMessage(pattern='/status'))
async def status_command(event):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏"""
    status_text = "üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:\n\n"
    
    if active_tasks > 0:
        status_text += "üîÑ –°–µ–π—á–∞—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Ñ–∞–π–ª\n"
    else:
        status_text += "‚úÖ –ë–æ—Ç —Å–≤–æ–±–æ–¥–µ–Ω\n"
    
    status_text += f"‚è≥ –í –æ—á–µ—Ä–µ–¥–∏: {len(task_queue)} —Ñ–∞–π–ª(–æ–≤)"
    
    await event.respond(status_text)

@client.on(events.NewMessage(pattern='/cancel'))
async def cancel(event):
    user_id = event.sender_id
    user_files.pop(user_id, None)
    user_mode.pop(user_id, None)
    await event.respond("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")

@client.on(events.NewMessage(pattern='/compress'))
async def compress_cmd(event):
    user_mode[event.sender_id] = 'compress'
    await event.respond("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª .epub, .fb2 –∏–ª–∏ .docx –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")

@client.on(events.NewMessage(pattern='/extract'))
async def extract_cmd(event):
    user_mode[event.sender_id] = 'extract'
    await event.respond("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª .epub, .fb2 –∏–ª–∏ .docx. –Ø –∏–∑–≤–ª–µ–∫—É –≥–ª–∞–≤—ã –∏ –ø–µ—Ä–µ—Å–æ–±–µ—Ä—É –µ–≥–æ —Å –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ–º.")

# –ü—Ä–∏—ë–º —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
@client.on(events.NewMessage(incoming=True))
async def handle_file(event):
    if not event.file:
        return
    user_id = event.sender_id
    mode = user_mode.get(user_id)
    if not mode:
        return

    filename = event.file.name or ''
    ext = os.path.splitext(filename)[1].lower()
    file_size = event.file.size

    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
    progress_msg = await event.respond("üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞...\n‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 0%")
    
    file_data = io.BytesIO()
    last_percent = 0
    
    async def progress_callback(current, total):
        nonlocal last_percent
        if total > 0 and should_update_progress(current, total, last_percent):
            progress_bar = create_progress_bar(current, total)
            new_text = f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞...\n{progress_bar}"
            await safe_edit_message(progress_msg, new_text)
            last_percent = int((current / total) * 100)
    
    await client.download_media(event.message, file=file_data, progress_callback=progress_callback)
    file_data.seek(0)

    await safe_edit_message(progress_msg, "üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞...")

    with tempfile.NamedTemporaryFile(delete=False, suffix=ext) as tmp:
        tmp.write(file_data.read())
        tmp_path = tmp.name

    user_files[user_id] = (filename, tmp_path)
    await progress_msg.delete()
    last_message_text.pop(progress_msg.id, None)

    if mode == 'compress' and ext in ['.epub', '.fb2', '.docx']:
        buttons = [Button.inline(label, data=label.encode()) for label in RESOLUTIONS]
        await event.respond("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:", buttons=buttons)

    elif mode == 'extract' and ext in ['.epub', '.fb2', '.docx']:
        await process_extract_with_queue(event, user_id, filename, tmp_path, ext)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å –æ—á–µ—Ä–µ–¥—å—é
@queue_manager
async def process_extract_with_queue(event, user_id, filename, tmp_path, ext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≥–ª–∞–≤ —Å —É—á–µ—Ç–æ–º –æ—á–µ—Ä–µ–¥–∏"""
    await event.respond("‚úÖ –§–∞–π–ª –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. –ù–∞—á–∏–Ω–∞—é...")
    try:
        base = os.path.splitext(filename)[0]
        output_path = None
        
        if ext == '.epub':
            chapters, images = await extract_chapters_from_epub_async(tmp_path, event)
            if not chapters:
                await event.respond("–ì–ª–∞–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ EPUB.")
                return
            output_path = os.path.join(tempfile.gettempdir(), f"{base}_converted.epub")
            build_progress = await event.respond("üìö –°–±–æ—Ä–∫–∞ EPUB...\n‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 0%")
            await build_epub_async(base, chapters, images, output_path, build_progress)
            await build_progress.delete()
            last_message_text.pop(build_progress.id, None)
            await client.send_file(user_id, output_path, caption="‚úÖ EPUB –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω —Å –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ–º.")
            
        elif ext == '.fb2':
            chapters = await extract_chapters_from_fb2_async(tmp_path, event)
            if not chapters:
                await event.respond("–ì–ª–∞–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ FB2.")
                return
            output_path = os.path.join(tempfile.gettempdir(), f"{base}_converted.fb2")
            build_progress = await event.respond("üìö –°–±–æ—Ä–∫–∞ FB2...\n‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 0%")
            await build_fb2_with_toc_async(base, chapters, output_path, build_progress)
            await build_progress.delete()
            last_message_text.pop(build_progress.id, None)
            await client.send_file(user_id, output_path, caption="‚úÖ FB2 –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω —Å –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ–º.")
            
        elif ext == '.docx':
            chapters = await extract_chapters_from_docx_async(tmp_path, event)
            if not chapters:
                await event.respond("–ì–ª–∞–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ DOCX.")
                return
            output_path = os.path.join(tempfile.gettempdir(), f"{base}_converted.docx")
            build_progress = await event.respond("üìö –°–±–æ—Ä–∫–∞ DOCX...\n‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 0%")
            await build_docx_with_toc_async(base, chapters, output_path, build_progress)
            await build_progress.delete()
            last_message_text.pop(build_progress.id, None)
            await client.send_file(user_id, output_path, caption="‚úÖ DOCX –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω —Å –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ–º.")
        
        if output_path and os.path.exists(output_path):
            os.remove(output_path)
            
    except Exception as e:
        logging.error(f"Error processing file: {e}", exc_info=True)
        await event.respond(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        if os.path.exists(tmp_path):
            os.remove(tmp_path)
        user_mode.pop(user_id, None)
        user_files.pop(user_id, None)

# Inline-–∫–Ω–æ–ø–∫–∏
@client.on(events.CallbackQuery)
async def handle_button(event):
    user_id = event.sender_id
    mode = user_mode.get(user_id)
    if not mode:
        return

    data = event.data.decode()
    filename, filepath = user_files.get(user_id, (None, None))
    if not filename or not os.path.exists(filepath):
        await event.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", alert=True)
        return

    ext = os.path.splitext(filename)[1].lower()

    if mode == 'compress':
        resolution = RESOLUTIONS.get(data)
        await event.edit(f"‚öôÔ∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {filename}...")
        await process_compression_with_queue(event, user_id, filename, filepath, resolution, ext)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∂–∞—Ç–∏—è —Å –æ—á–µ—Ä–µ–¥—å—é
@queue_manager
async def process_compression_with_queue(event, user_id, filename, filepath, resolution, ext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∂–∞—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —É—á–µ—Ç–æ–º –æ—á–µ—Ä–µ–¥–∏"""
    await event.edit("‚úÖ –§–∞–π–ª –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. –ù–∞—á–∏–Ω–∞—é...")
    
    if ext == '.fb2':
        await process_fb2(event, user_id, filename, filepath, resolution)
    elif ext == '.docx':
        await process_docx(event, user_id, filename, filepath, resolution)
    elif ext == '.epub':
        await process_epub_compression(event, user_id, filename, filepath, resolution)
    
    if os.path.exists(filepath):
        os.remove(filepath)
    user_files.pop(user_id, None)
    user_mode.pop(user_id, None)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π FB2 —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
async def process_fb2(event, user_id, filename, filepath, resolution):
    ns = {'fb2': 'http://www.gribuser.ru/xml/fictionbook/2.0'}
    tree = etree.parse(filepath)
    root = tree.getroot()
    binaries = root.xpath('//fb2:binary', namespaces=ns)

    changed = deleted = 0
    image_binaries = [b for b in binaries if 'image' in (b.get('content-type') or '')]
    total = len(image_binaries)
    
    if total == 0:
        await event.edit("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ.")
        return

    progress_msg = await event.respond(f"üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π FB2...\n‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 0%")
    last_percent = 0

    for current, binary in enumerate(image_binaries, 1):
        if should_update_progress(current, total, last_percent):
            progress_bar = create_progress_bar(current, total)
            action = "–£–¥–∞–ª–µ–Ω–∏–µ" if resolution is None else "–°–∂–∞—Ç–∏–µ"
            new_text = f"üñºÔ∏è {action} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π FB2...\n{progress_bar}"
            await safe_edit_message(progress_msg, new_text)
            last_percent = int((current / total) * 100)

        if resolution is None:
            # –£–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞
            binary_id = binary.get('id')
            if binary_id:
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                for img_ref in root.xpath(f'//fb2:image[@l:href="#{binary_id}"]', 
                                        namespaces={'fb2': ns['fb2'], 'l': 'http://www.w3.org/1999/xlink'}):
                    img_ref.getparent().remove(img_ref)
            root.remove(binary)
            deleted += 1
        else:
            try:
                img = Image.open(io.BytesIO(base64.b64decode(binary.text))).convert('RGB')
                img.thumbnail(resolution, Image.Resampling.LANCZOS)
                buf = io.BytesIO()
                img.save(buf, format='JPEG', quality=30)
                binary.text = base64.b64encode(buf.getvalue()).decode()
                binary.set('content-type', 'image/jpeg')
                changed += 1
            except Exception:
                continue

    await safe_edit_message(progress_msg, "üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞...")
    base, ext = os.path.splitext(filename)
    out_path = os.path.join(tempfile.gettempdir(), f"{base}_compressed{ext}")
    tree.write(out_path, encoding='utf-8', xml_declaration=True)
    
    await progress_msg.delete()
    last_message_text.pop(progress_msg.id, None)
    await client.send_file(user_id, out_path, caption=f"‚úÖ –ì–æ—Ç–æ–≤–æ: —Å–∂–∞—Ç–æ {changed}, —É–¥–∞–ª–µ–Ω–æ {deleted}")
    os.remove(filepath)
    os.remove(out_path)

# DOCX —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
async def process_docx(event, user_id, filename, filepath, resolution):
    doc = Document(filepath)
    changed = deleted = 0
    total = len(doc.inline_shapes)
    
    if total == 0:
        await event.edit("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ.")
        return

    progress_msg = await event.respond(f"üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π DOCX...\n‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 0%")
    last_percent = 0

    if resolution is None:
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        shapes_to_remove = []
        for current, shape in enumerate(doc.inline_shapes, 1):
            if should_update_progress(current, total, last_percent):
                progress_bar = create_progress_bar(current, total)
                new_text = f"üñºÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π DOCX...\n{progress_bar}"
                await safe_edit_message(progress_msg, new_text)
                last_percent = int((current / total) * 100)
            shapes_to_remove.append(shape)
        
        # –£–¥–∞–ª—è–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä—É—à–∏—Ç—å –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é
        for shape in reversed(shapes_to_remove):
            try:
                shape._element.getparent().remove(shape._element)
                deleted += 1
            except Exception:
                continue
    else:
        for current, shape in enumerate(doc.inline_shapes, 1):
            if should_update_progress(current, total, last_percent):
                progress_bar = create_progress_bar(current, total)
                new_text = f"üñºÔ∏è –°–∂–∞—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π DOCX...\n{progress_bar}"
                await safe_edit_message(progress_msg, new_text)
                last_percent = int((current / total) * 100)
            
            try:
                r_id = shape._inline.graphic.graphicData.pic.blipFill.blip.embed
                img_part = doc.part.related_parts[r_id]
                img = Image.open(io.BytesIO(img_part.blob)).convert('RGB')
                img.thumbnail(resolution, Image.Resampling.LANCZOS)
                buf = io.BytesIO()
                img.save(buf, format='JPEG', quality=30)
                img_part._blob = buf.getvalue()
                changed += 1
            except Exception:
                continue

    await safe_edit_message(progress_msg, "üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
    base, ext = os.path.splitext(filename)
    out_path = os.path.join(tempfile.gettempdir(), f"{base}_compressed{ext}")
    doc.save(out_path)
    
    await progress_msg.delete()
    last_message_text.pop(progress_msg.id, None)
    await client.send_file(user_id, out_path, caption=f"‚úÖ –ì–æ—Ç–æ–≤–æ: —Å–∂–∞—Ç–æ {changed}, —É–¥–∞–ª–µ–Ω–æ {deleted}")
    os.remove(filepath)
    os.remove(out_path)

# EPUB —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
async def process_epub_compression(event, user_id, filename, filepath, resolution):
    book = epub.read_epub(filepath)
    changed = deleted = 0
    images = [item for item in list(book.get_items()) if item.media_type and item.media_type.startswith("image/")]
    total = len(images)
    
    if total == 0:
        await event.edit("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ EPUB.")
        return

    progress_msg = await event.respond(f"üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π EPUB...\n‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 0%")
    last_percent = 0

    for current, item in enumerate(images, 1):
        if should_update_progress(current, total, last_percent):
            progress_bar = create_progress_bar(current, total)
            action = "–£–¥–∞–ª–µ–Ω–∏–µ" if resolution is None else "–°–∂–∞—Ç–∏–µ"
            new_text = f"üñºÔ∏è {action} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π EPUB...\n{progress_bar}"
            await safe_edit_message(progress_msg, new_text)
            last_percent = int((current / total) * 100)

        if resolution is None:
            book.items.remove(item)
            deleted += 1
        else:
            try:
                img = Image.open(io.BytesIO(item.content)).convert("RGB")
                img.thumbnail(resolution, Image.Resampling.LANCZOS)
                buf = io.BytesIO()
                img.save(buf, format="JPEG", quality=30)
                item.content = buf.getvalue()
                item.media_type = "image/jpeg"
                changed += 1
            except Exception:
                continue

    await safe_edit_message(progress_msg, "üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ EPUB...")
    base, ext = os.path.splitext(filename)
    out_path = os.path.join(tempfile.gettempdir(), f"{base}_compressed{ext}")
    epub.write_epub(out_path, book)
    
    await progress_msg.delete()
    last_message_text.pop(progress_msg.id, None)
    await client.send_file(user_id, out_path, caption=f"‚úÖ –ì–æ—Ç–æ–≤–æ: —Å–∂–∞—Ç–æ {changed}, —É–¥–∞–ª–µ–Ω–æ {deleted}")
    os.remove(filepath)
    os.remove(out_path)

# EPUB: –≥–ª–∞–≤—ã —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
async def extract_chapters_from_epub_async(epub_path, event):
    temp_dir = tempfile.mkdtemp()
    html_blocks = []
    images = {}

    progress_msg = await event.respond("üìñ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ EPUB...\n‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 0%")
    
    try:
        with zipfile.ZipFile(epub_path, 'r') as zf:
            zf.extractall(temp_dir)

        await safe_edit_message(progress_msg, "üìñ –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ...\n‚ñì‚ñì‚ñì‚ñì‚ñì‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 25%")
        
        all_files = []
        for root, _, files in os.walk(temp_dir):
            for file in files:
                all_files.append(os.path.join(root, file))
        
        processed = 0
        total_files = len(all_files)
        
        for file_path in all_files:
            file = os.path.basename(file_path)
            if file.lower().endswith((".xhtml", ".html", ".htm")):
                try:
                    with open(file_path, "r", encoding="utf-8") as f:
                        html_blocks.append(BeautifulSoup(f, "lxml"))
                except Exception as e:
                    logging.warning(f"Could not parse HTML file {file}: {e}")
            elif file.lower().endswith((".jpg", ".jpeg", ".png", ".gif", ".svg", ".webp")):
                images[file] = file_path
            
            processed += 1
            if processed % 10 == 0:
                progress = int((processed / total_files) * 25) + 25
                progress_bar = "‚ñì" * (progress // 5) + "‚ñë" * (20 - progress // 5)
                new_text = f"üìñ –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤...\n{progress_bar} {progress}%"
                await safe_edit_message(progress_msg, new_text)

        await safe_edit_message(progress_msg, "üîç –ü–æ–∏—Å–∫ –≥–ª–∞–≤...\n‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 50%")
        
        chapters = []
        title, content, num = None, "", 0
        
        processed_blocks = 0
        total_blocks = len(html_blocks)
        
        for soup in html_blocks:
            if not soup.body:
                continue
            for elem in soup.body.find_all(recursive=False):
                text = elem.get_text(strip=True)
                match = CHAPTER_RE.match(text or "")
                if match:
                    if title:
                        chapters.append((num, title, content.strip()))
                    title = text  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç, –Ω–µ —Ç–æ–ª—å–∫–æ match.group(1)
                    num_match = re.search(r'\d+', title)
                    num = int(num_match.group()) if num_match else len(chapters)
                    content = f"<h1>{title}</h1>"
                else:
                    content += str(elem)
            
            processed_blocks += 1
            if processed_blocks % 5 == 0:
                progress = 50 + int((processed_blocks / total_blocks) * 25)
                progress_bar = "‚ñì" * (progress // 5) + "‚ñë" * (20 - progress // 5)
                new_text = f"üîç –ü–æ–∏—Å–∫ –≥–ª–∞–≤...\n{progress_bar} {progress}%"
                await safe_edit_message(progress_msg, new_text)
        
        if title:
            chapters.append((num, title, content.strip()))

        await safe_edit_message(progress_msg, "üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...\n‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñë‚ñë‚ñë‚ñë‚ñë 75%")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –≥–ª–∞–≤—ã –∏ –¥—É–±–ª–∏–∫–∞—Ç—ã
        seen, result = set(), []
        for n, t, c in sorted(chapters, key=lambda x: x[0]):
            if t not in seen and len(c.strip()) > len(f"<h1>{t}</h1>"):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                result.append((n, t, c))
                seen.add(t)
        
        await safe_edit_message(progress_msg, f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≥–ª–∞–≤: {len(result)}\n‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì 100%")
        await asyncio.sleep(1)
        await progress_msg.delete()
        last_message_text.pop(progress_msg.id, None)
        
        return result, images
        
    finally:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        if os.path.exists(temp_dir):
            shutil.rmtree(temp_dir)

async def build_epub_async(title, chapters, image_paths, output_path, progress_msg):
    book = epub.EpubBook()
    book.set_identifier("converted")
    book.set_title(title)
    book.set_language("ru")
    book.add_author("Adikia Bot")  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å Chronos Bot

    spine = ['nav']
    toc = []
    
    total_steps = len(image_paths) + len(chapters) + 3
    current_step = 0

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    for fname, path in image_paths.items():
        current_step += 1
        progress_bar = create_progress_bar(current_step, total_steps)
        new_text = f"üìö –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...\n{progress_bar}"
        await safe_edit_message(progress_msg, new_text)
        
        try:
            ext = os.path.splitext(fname)[1][1:].lower()
            mime = f"image/{'jpeg' if ext in ['jpg', 'jpeg'] else ext}"
            with open(path, 'rb') as f:
                book.add_item(epub.EpubItem(uid=fname, file_name=f"images/{fname}", media_type=mime, content=f.read()))
        except Exception as e:
            logging.warning(f"Could not add image {fname}: {e}")

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤
    for i, (num, chapter_title, html_body) in enumerate(chapters, 1):
        current_step += 1
        progress_bar = create_progress_bar(current_step, total_steps)
        new_text = f"üìö –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤...\n{progress_bar}"
        await safe_edit_message(progress_msg, new_text)
        
        html = epub.EpubHtml(title=chapter_title, file_name=f"chap_{i}.xhtml", lang='ru')
        html.content = html_body
        book.add_item(html)
        spine.append(html)
        toc.append(epub.Link(html.file_name, chapter_title, f"chap_{i}"))

    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞
    current_step += 1
    progress_bar = create_progress_bar(current_step, total_steps)
    await safe_edit_message(progress_msg, f"üìö –°–æ–∑–¥–∞–Ω–∏–µ –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è...\n{progress_bar}")
    
    book.spine = spine
    book.toc = toc
    book.add_item(epub.EpubNcx())
    book.add_item(epub.EpubNav())
    
    current_step += 1
    progress_bar = create_progress_bar(current_step, total_steps)
    await safe_edit_message(progress_msg, f"üìö –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ EPUB...\n{progress_bar}")
    
    epub.write_epub(output_path, book)
    
    current_step += 1
    progress_bar = create_progress_bar(current_step, total_steps)
    await safe_edit_message(progress_msg, f"üìö –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ...\n{progress_bar}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≥–ª–∞–≤ –∏–∑ FB2
async def extract_chapters_from_fb2_async(fb2_path, event):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≥–ª–∞–≤—ã –∏–∑ FB2 —Ñ–∞–π–ª–∞"""
    progress_msg = await event.respond("üìñ –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã FB2...\n‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 0%")
    
    try:
        ns = {'fb2': 'http://www.gribuser.ru/xml/fictionbook/2.0'}
        tree = etree.parse(fb2_path)
        root = tree.getroot()
        
        await safe_edit_message(progress_msg, "üìñ –ü–æ–∏—Å–∫ –≥–ª–∞–≤ –≤ FB2...\n‚ñì‚ñì‚ñì‚ñì‚ñì‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 25%")
        
        chapters = []
        # –ò—â–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        sections = root.xpath('//fb2:section[fb2:title]', namespaces=ns)
        total = len(sections)
        
        if total == 0:
            await safe_edit_message(progress_msg, "‚ùå –°–µ–∫—Ü–∏–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            await asyncio.sleep(2)
            await progress_msg.delete()
            return []
        
        for idx, section in enumerate(sections):
            if idx % 5 == 0:
                progress = 25 + int((idx / total) * 50)
                progress_bar = "‚ñì" * (progress // 5) + "‚ñë" * (20 - progress // 5)
                await safe_edit_message(progress_msg, f"üìñ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ–∫—Ü–∏–π...\n{progress_bar} {progress}%")
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            title_elem = section.find('.//fb2:title', namespaces=ns)
            if title_elem is not None:
                title_text = ' '.join(title_elem.itertext()).strip()
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–µ–∫—Ü–∏–∏
                content = etree.tostring(section, encoding='unicode', pretty_print=True)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –≥–ª–∞–≤—ã –µ—Å–ª–∏ –µ—Å—Ç—å
                num_match = re.search(r'\d+', title_text)
                num = int(num_match.group()) if num_match else idx
                
                chapters.append((num, title_text, content))
        
        await safe_edit_message(progress_msg, f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≥–ª–∞–≤: {len(chapters)}\n‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì 100%")
        await asyncio.sleep(1)
        await progress_msg.delete()
        last_message_text.pop(progress_msg.id, None)
        
        return chapters
        
    except Exception as e:
        logging.error(f"Error parsing FB2: {e}")
        await safe_edit_message(progress_msg, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ FB2: {e}")
        await asyncio.sleep(3)
        await progress_msg.delete()
        return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è FB2 —Å –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ–º
async def build_fb2_with_toc_async(title, chapters, output_path, progress_msg):
    """–°–æ–∑–¥–∞–µ—Ç FB2 —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ–º"""
    ns = {'fb2': 'http://www.gribuser.ru/xml/fictionbook/2.0'}
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É FB2
    root = etree.Element('{http://www.gribuser.ru/xml/fictionbook/2.0}FictionBook', 
                        nsmap={None: ns['fb2']})
    root.set('{http://www.w3.org/2001/XMLSchema-instance}schemaLocation', 
             'http://www.gribuser.ru/xml/fictionbook/2.0 http://www.gribuser.ru/xml/fictionbook/2.0/FictionBook2.xsd')
    
    # –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    description = etree.SubElement(root, 'description')
    title_info = etree.SubElement(description, 'title-info')
    etree.SubElement(title_info, 'book-title').text = title
    etree.SubElement(title_info, 'lang').text = 'ru'
    
    # –¢–µ–ª–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    body = etree.SubElement(root, 'body')
    
    total = len(chapters)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–∞–≤—ã
    for idx, (num, chapter_title, content) in enumerate(chapters):
        progress = int((idx / total) * 100)
        progress_bar = create_progress_bar(idx, total)
        await safe_edit_message(progress_msg, f"üìö –°–±–æ—Ä–∫–∞ FB2...\n{progress_bar}")
        
        # –ü–∞—Ä—Å–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≥–ª–∞–≤—ã
        try:
            # –£–¥–∞–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ XML –µ—Å–ª–∏ –µ—Å—Ç—å
            content = content.replace('<?xml version="1.0" encoding="utf-8"?>', '')
            section = etree.fromstring(content)
            # –£–±–∏—Ä–∞–µ–º namespace –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            for elem in section.iter():
                elem.tag = elem.tag.split('}')[-1] if '}' in elem.tag else elem.tag
            body.append(section)
        except Exception as e:
            logging.error(f"Could not parse chapter content: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ–∫—Ü–∏—é
            section = etree.SubElement(body, 'section')
            section_title = etree.SubElement(section, 'title')
            p = etree.SubElement(section_title, 'p')
            p.text = chapter_title
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    await safe_edit_message(progress_msg, "üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ FB2...\n‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì 100%")
    tree = etree.ElementTree(root)
    tree.write(output_path, encoding='utf-8', xml_declaration=True, pretty_print=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≥–ª–∞–≤ –∏–∑ DOCX
async def extract_chapters_from_docx_async(docx_path, event):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≥–ª–∞–≤—ã –∏–∑ DOCX —Ñ–∞–π–ª–∞ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º"""
    progress_msg = await event.respond("üìñ –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã DOCX...\n‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 0%")
    
    try:
        doc = Document(docx_path)
        chapters = []
        current_chapter = None
        current_content = []
        
        total = len(doc.paragraphs)
        
        for idx, para in enumerate(doc.paragraphs):
            if idx % 20 == 0:
                progress = int((idx / total) * 75)
                progress_bar = create_progress_bar(idx, total)
                await safe_edit_message(progress_msg, f"üìñ –ê–Ω–∞–ª–∏–∑ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤...\n{progress_bar}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –≥–ª–∞–≤—ã
            text = para.text.strip()
            if text and (para.style.name.startswith('Heading') or CHAPTER_RE.match(text)):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –≥–ª–∞–≤—É
                if current_chapter and current_content:
                    num_match = re.search(r'\d+', current_chapter)
                    num = int(num_match.group()) if num_match else len(chapters)
                    chapters.append((num, current_chapter, '\n'.join(current_content)))
                
                # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –≥–ª–∞–≤—É
                current_chapter = text
                current_content = []  # –ù–µ –≤–∫–ª—é—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç
            elif current_chapter and text:  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
                current_content.append(text)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≥–ª–∞–≤—É
        if current_chapter and current_content:
            num_match = re.search(r'\d+', current_chapter)
            num = int(num_match.group()) if num_match else len(chapters)
            chapters.append((num, current_chapter, '\n'.join(current_content)))
        
        await safe_edit_message(progress_msg, f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≥–ª–∞–≤: {len(chapters)}\n‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì 100%")
        await asyncio.sleep(1)
        await progress_msg.delete()
        last_message_text.pop(progress_msg.id, None)
        
        return chapters
        
    except Exception as e:
        logging.error(f"Error parsing DOCX: {e}")
        await safe_edit_message(progress_msg, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ DOCX: {e}")
        await asyncio.sleep(3)
        await progress_msg.delete()
        return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è DOCX —Å –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ–º
async def build_docx_with_toc_async(title, chapters, output_path, progress_msg):
    """–°–æ–∑–¥–∞–µ—Ç DOCX —Ñ–∞–π–ª —Å –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ–º"""
    doc = Document()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    doc.add_heading(title, 0)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ
    doc.add_heading('–û–≥–ª–∞–≤–ª–µ–Ω–∏–µ', 1)
    
    total_steps = len(chapters) * 2 + 2
    current_step = 0
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–ª–∞–≤ –¥–ª—è –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è
    for num, chapter_title, _ in sorted(chapters, key=lambda x: x[0]):
        current_step += 1
        progress_bar = create_progress_bar(current_step, total_steps)
        await safe_edit_message(progress_msg, f"üìö –°–æ–∑–¥–∞–Ω–∏–µ –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è...\n{progress_bar}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è
        doc.add_paragraph(f"{num + 1}. {chapter_title}", style='List Number')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑—Ä—ã–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å–ª–µ –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è
    doc.add_page_break()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–∞–≤—ã
    for num, chapter_title, content in sorted(chapters, key=lambda x: x[0]):
        current_step += 1
        progress_bar = create_progress_bar(current_step, total_steps)
        await safe_edit_message(progress_msg, f"üìö –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤...\n{progress_bar}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥–ª–∞–≤—ã
        doc.add_heading(chapter_title, 1)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≥–ª–∞–≤—ã
        paragraphs = content.split('\n')
        for paragraph in paragraphs:
            if paragraph.strip():
                doc.add_paragraph(paragraph)
        
        # –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑—Ä—ã–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –≥–ª–∞–≤—ã –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    current_step += 1
    progress_bar = create_progress_bar(current_step, total_steps)
    await safe_edit_message(progress_msg, f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ DOCX...\n{progress_bar}")
    
    doc.save(output_path)

# –ó–∞–ø—É—Å–∫
client.start()
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
print("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤: —Å—Ç—Ä–æ–≥–æ –ø–æ –æ—á–µ—Ä–µ–¥–∏")
client.run_until_disconnected()
