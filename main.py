import asyncio
from telethon import TelegramClient, events
from telethon.tl.functions.channels import CreateForumTopicRequest
from telethon.tl.types import DocumentAttributeImageSize
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ API
API_ID = 24519852
API_HASH = '2186f59fdf9c2ad4e7ddf0deb250ff0c'

# ID –≥—Ä—É–ø–ø—ã (—Å—É–ø–µ—Ägroup)
GROUP_ID = -1002756641199

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
client = TelegramClient('topic_bot_session', API_ID, API_HASH)

# –°–ü–ò–°–û–ö –¢–ï–ó–ò–°–û–í - –í–°–¢–ê–í–¨–¢–ï –°–Æ–î–ê –í–ê–® –°–ü–ò–°–û–ö
TOPIC_LIST = [
    # –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞:
    # "2 –ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Ç–µ–º—ã",
    # "3 –ù–∞–∑–≤–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–π —Ç–µ–º—ã",
    # "4 –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ—Ç—å–µ–π —Ç–µ–º—ã",
    # ... –¥–æ–±–∞–≤—å—Ç–µ –∑–¥–µ—Å—å –≤–∞—à —Å–ø–∏—Å–æ–∫
]

def load_topics_from_file(filename):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–º –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            topics = [line.strip() for line in f if line.strip()]
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(topics)} —Ç–µ–º –∏–∑ —Ñ–∞–π–ª–∞ {filename}")
        return topics
    except FileNotFoundError:
        logger.error(f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return []

async def create_topic_from_text(topic_text):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–º—É –ø–æ —Ç–µ–∫—Å—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø—ã
        group = await client.get_entity(GROUP_ID)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã
        title = topic_text.strip()
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è (Telegram –ª–∏–º–∏—Ç ~300 —Å–∏–º–≤–æ–ª–æ–≤)
        if len(title) > 200:
            title = title[:197] + "..."
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–º—É
        result = await client(CreateForumTopicRequest(
            channel=group,
            title=title,
            icon_color=None,
            icon_emoji_id=None
        ))
        
        logger.info(f"–¢–µ–º–∞ '{title}' —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return result
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–º—ã '{topic_text}': {e}")
        return None

async def create_topics_from_list(topics_list=None, start_index=0, end_index=None):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–º—ã –∏–∑ —Å–ø–∏—Å–∫–∞"""
    if topics_list is None:
        topics_list = TOPIC_LIST
    
    if not topics_list:
        logger.error("–°–ø–∏—Å–æ–∫ —Ç–µ–º –ø—É—Å—Ç!")
        return 0, 0
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
    if end_index is None:
        end_index = len(topics_list)
    
    topics_to_create = topics_list[start_index:end_index]
    total_count = len(topics_to_create)
    
    successful = 0
    failed = 0
    
    logger.info(f"–ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ {total_count} —Ç–µ–º (—Å {start_index+1} –ø–æ {end_index})...")
    
    for i, topic_text in enumerate(topics_to_create, 1):
        try:
            result = await create_topic_from_text(topic_text)
            
            if result:
                successful += 1
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ–º–∞ {i}/{total_count}: {topic_text[:50]}...")
            else:
                failed += 1
                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ–º—É {i}/{total_count}: {topic_text[:50]}...")
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ç–µ–º (12 —Å–µ–∫—É–Ω–¥)
            if i < total_count:
                logger.info(f"‚è≥ –ñ–¥–µ–º 12 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å–ª–µ–¥—É—é—â–µ–π —Ç–µ–º—ã...")
                await asyncio.sleep(12)
                
        except Exception as e:
            failed += 1
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–º—ã {i}: {e}")
            
            # –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ –∂–¥–µ–º –¥–æ–ª—å—à–µ
            if "FLOOD_WAIT" in str(e):
                wait_time = 60
                logger.warning(f"‚ö†Ô∏è –§–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—å! –ñ–¥–µ–º {wait_time} —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(wait_time)
            else:
                await asyncio.sleep(12)
    
    logger.info(f"üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ! –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: {successful}, –û—à–∏–±–æ–∫: {failed}")
    return successful, failed

@client.on(events.NewMessage(pattern='/create_from_list'))
async def handler_create_from_list(event):
    """–°–æ–∑–¥–∞–µ—Ç –≤—Å–µ —Ç–µ–º—ã –∏–∑ —Å–ø–∏—Å–∫–∞"""
    if event.chat_id != GROUP_ID:
        await event.respond("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ.")
        return
    
    if not TOPIC_LIST:
        await event.respond("‚ùå –°–ø–∏—Å–æ–∫ —Ç–µ–º –ø—É—Å—Ç! –î–æ–±–∞–≤—å—Ç–µ —Ç–µ–º—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TOPIC_LIST")
        return
    
    total_topics = len(TOPIC_LIST)
    estimated_time = (total_topics * 12) // 60
    
    await event.respond(
        f"üöÄ –ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ {total_topics} —Ç–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞!\n"
        f"‚è±Ô∏è –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {estimated_time} –º–∏–Ω—É—Ç"
    )
    
    successful, failed = await create_topics_from_list()
    
    result_message = (
        f"üèÅ **–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: {successful} —Ç–µ–º\n"
        f"‚ùå –û—à–∏–±–æ–∫: {failed}\n"
        f"üìä –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(successful/(successful+failed)*100):.1f}%"
    )
    
    await event.respond(result_message)

@client.on(events.NewMessage(pattern='/create_from_file'))
async def handler_create_from_file(event):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–º—ã –∏–∑ —Ñ–∞–π–ª–∞ topics.txt"""
    if event.chat_id != GROUP_ID:
        await event.respond("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ.")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–º—ã –∏–∑ —Ñ–∞–π–ª–∞
    topics = load_topics_from_file('/storage/emulated/0/Bots/topics.txt')
    
    if not topics:
        await event.respond("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–º—ã –∏–∑ —Ñ–∞–π–ª–∞ topics.txt")
        return
    
    total_topics = len(topics)
    estimated_time = (total_topics * 12) // 60
    
    await event.respond(
        f"üöÄ –ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ {total_topics} —Ç–µ–º –∏–∑ —Ñ–∞–π–ª–∞!\n"
        f"‚è±Ô∏è –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {estimated_time} –º–∏–Ω—É—Ç"
    )
    
    successful, failed = await create_topics_from_list(topics)
    
    result_message = (
        f"üèÅ **–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–º –∏–∑ —Ñ–∞–π–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: {successful} —Ç–µ–º\n"
        f"‚ùå –û—à–∏–±–æ–∫: {failed}\n"
        f"üìä –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(successful/(successful+failed)*100):.1f}%"
    )
    
    await event.respond(result_message)

@client.on(events.NewMessage(pattern=r'/create_range_(\d+)_(\d+)'))
async def handler_create_range(event):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–º—ã –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç N –¥–æ M"""
    if event.chat_id != GROUP_ID:
        await event.respond("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ.")
        return
    
    start_num = int(event.pattern_match.group(1)) - 1  # -1 –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞ –º–∞—Å—Å–∏–≤–∞
    end_num = int(event.pattern_match.group(2))
    
    if not TOPIC_LIST:
        await event.respond("‚ùå –°–ø–∏—Å–æ–∫ —Ç–µ–º –ø—É—Å—Ç!")
        return
    
    if start_num < 0 or end_num > len(TOPIC_LIST) or start_num >= end_num:
        await event.respond(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω. –î–æ—Å—Ç—É–ø–Ω–æ —Ç–µ–º: {len(TOPIC_LIST)}")
        return
    
    count = end_num - start_num
    estimated_time = (count * 12) // 60
    
    await event.respond(
        f"üöÄ –°–æ–∑–¥–∞—é —Ç–µ–º—ã —Å {start_num+1} –ø–æ {end_num} ({count} —Ç–µ–º)\n"
        f"‚è±Ô∏è –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {estimated_time} –º–∏–Ω—É—Ç"
    )
    
    successful, failed = await create_topics_from_list(TOPIC_LIST, start_num, end_num)
    
    result_message = (
        f"üèÅ **–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ç–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: {successful} —Ç–µ–º\n"
        f"‚ùå –û—à–∏–±–æ–∫: {failed}\n"
        f"üìä –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(successful/(successful+failed)*100):.1f}%"
    )
    
    await event.respond(result_message)

@client.on(events.NewMessage(pattern='/info'))
async def handler_info(event):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ç–µ–º–∞—Ö"""
    if event.chat_id != GROUP_ID:
        await event.respond("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ.")
        return
    
    info_text = f"üìã **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–º–∞—Ö:**\n\n"
    
    if TOPIC_LIST:
        info_text += f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–µ–º –∏–∑ –∫–æ–¥–∞: {len(TOPIC_LIST)}\n"
        info_text += f"üìù –ü–µ—Ä–≤—ã–µ 3 —Ç–µ–º—ã –∏–∑ —Å–ø–∏—Å–∫–∞:\n"
        for i, topic in enumerate(TOPIC_LIST[:3]):
            info_text += f"   {i+1}. {topic[:50]}...\n"
    else:
        info_text += "‚ùå –°–ø–∏—Å–æ–∫ —Ç–µ–º –≤ –∫–æ–¥–µ –ø—É—Å—Ç\n"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª
    file_topics = load_topics_from_file('topics.txt')
    if file_topics:
        info_text += f"\nüìÅ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª topics.txt: {len(file_topics)} —Ç–µ–º"
    else:
        info_text += f"\n‚ùå –§–∞–π–ª topics.txt –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    await event.respond(info_text)

# –°—Ç–∞—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
async def create_experiment_topic(topic_number=None):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–º—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç'"""
    try:
        group = await client.get_entity(GROUP_ID)
        
        if topic_number:
            title = f"–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç #{topic_number}"
        else:
            title = "–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç"
        
        result = await client(CreateForumTopicRequest(
            channel=group,
            title=title,
            icon_color=None,
            icon_emoji_id=None
        ))
        
        logger.info(f"–¢–µ–º–∞ '{title}' —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return result
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–º—ã: {e}")
        return None

async def create_multiple_topics(count=150):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ–º —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏"""
    successful = 0
    failed = 0
    
    logger.info(f"–ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ {count} —Ç–µ–º...")
    
    for i in range(1, count + 1):
        try:
            result = await create_experiment_topic(i)
            
            if result:
                successful += 1
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ–º–∞ {i}/{count} (—É—Å–ø–µ—à–Ω–æ: {successful})")
            else:
                failed += 1
                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ–º—É {i}/{count} (–æ—à–∏–±–æ–∫: {failed})")
            
            if i < count:
                logger.info(f"‚è≥ –ñ–¥–µ–º 12 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å–ª–µ–¥—É—é—â–µ–π —Ç–µ–º—ã...")
                await asyncio.sleep(12)
                
        except Exception as e:
            failed += 1
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–º—ã {i}: {e}")
            
            if "FLOOD_WAIT" in str(e):
                wait_time = 60
                logger.warning(f"‚ö†Ô∏è –§–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—å! –ñ–¥–µ–º {wait_time} —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(wait_time)
            else:
                await asyncio.sleep(12)
    
    logger.info(f"üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ! –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: {successful}, –û—à–∏–±–æ–∫: {failed}")
    return successful, failed

@client.on(events.NewMessage(pattern='/create_topic'))
async def handler_create_topic(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–º—ã"""
    if event.chat_id != GROUP_ID:
        await event.respond("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ.")
        return
    
    result = await create_experiment_topic()
    
    if result:
        await event.respond("‚úÖ –¢–µ–º–∞ '–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç' —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        await event.respond("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–º—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞.")

@client.on(events.NewMessage(pattern='/create_150'))
async def handler_create_150(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å–æ–∑–¥–∞–Ω–∏—è 150 —Ç–µ–º"""
    if event.chat_id != GROUP_ID:
        await event.respond("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ.")
        return
    
    await event.respond("üöÄ –ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ 150 —Ç–µ–º! –≠—Ç–æ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 30 –º–∏–Ω—É—Ç...")
    
    successful, failed = await create_multiple_topics(150)
    
    result_message = (
        f"üèÅ **–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: {successful} —Ç–µ–º\n"
        f"‚ùå –û—à–∏–±–æ–∫: {failed}\n"
        f"üìä –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(successful/(successful+failed)*100):.1f}%"
    )
    
    await event.respond(result_message)

@client.on(events.NewMessage(pattern=r'/create_(\d+)'))
async def handler_create_custom(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å–æ–∑–¥–∞–Ω–∏—è N —Ç–µ–º"""
    if event.chat_id != GROUP_ID:
        await event.respond("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ.")
        return
    
    count = int(event.pattern_match.group(1))
    
    if count > 200:
        await event.respond("‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º: 200")
        return
    
    if count < 1:
        await event.respond("‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        return
    
    estimated_time = (count * 12) // 60
    
    await event.respond(
        f"üöÄ –ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ {count} —Ç–µ–º!\n"
        f"‚è±Ô∏è –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {estimated_time} –º–∏–Ω—É—Ç"
    )
    
    successful, failed = await create_multiple_topics(count)
    
    result_message = (
        f"üèÅ **–°–æ–∑–¥–∞–Ω–∏–µ {count} —Ç–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: {successful} —Ç–µ–º\n"
        f"‚ùå –û—à–∏–±–æ–∫: {failed}\n"
        f"üìä –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(successful/(successful+failed)*100):.1f}%"
    )
    
    await event.respond(result_message)

@client.on(events.NewMessage(pattern='/start'))
async def handler_start(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await event.respond(
        "ü§ñ –ë–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–º –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/create_topic - —Å–æ–∑–¥–∞—Ç—å —Ç–µ–º—É '–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç'\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å"
    )

@client.on(events.NewMessage(pattern='/help'))
async def handler_help(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏"""
    help_text = """
üîß **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É**

**–°—Ç–∞—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/create_topic` - —Å–æ–∑–¥–∞—Ç—å –æ–¥–Ω—É —Ç–µ–º—É "–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç" 
‚Ä¢ `/create_150` - —Å–æ–∑–¥–∞—Ç—å 150 —Ç–µ–º "–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç #1-150"
‚Ä¢ `/create_N` - —Å–æ–∑–¥–∞—Ç—å N —Ç–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: /create_50)

**–ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ç–µ–º:**
‚Ä¢ `/create_from_list` - —Å–æ–∑–¥–∞—Ç—å –≤—Å–µ —Ç–µ–º—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –≤ –∫–æ–¥–µ
‚Ä¢ `/create_from_file` - —Å–æ–∑–¥–∞—Ç—å —Ç–µ–º—ã –∏–∑ —Ñ–∞–π–ª–∞ topics.txt
‚Ä¢ `/create_range_N_M` - —Å–æ–∑–¥–∞—Ç—å —Ç–µ–º—ã —Å N –ø–æ M (–Ω–∞–ø—Ä–∏–º–µ—Ä: /create_range_1_100)
‚Ä¢ `/info` - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ç–µ–º–∞—Ö

**–°–ø—Ä–∞–≤–∫–∞:**
‚Ä¢ `/start` - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
‚Ä¢ `/help` - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

**‚ö†Ô∏è –ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—à —Å–ø–∏—Å–æ–∫:**
1. –í—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–º—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TOPIC_LIST –≤ –∫–æ–¥–µ
2. –ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª topics.txt —Å —Ç–µ–º–∞–º–∏ (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É)

**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**
‚Ä¢ –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –≥—Ä—É–ø–ø–µ
‚Ä¢ –ì—Ä—É–ø–ø–∞ –¥–æ–ª–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ç–µ–º—ã (Topics/Forum)
‚Ä¢ –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–º

**–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** –ö–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ.
    """
    await event.respond(help_text)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        await client.start()
        
        me = await client.get_me()
        logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @{me.username}")
        
        try:
            group = await client.get_entity(GROUP_ID)
            logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥—Ä—É–ø–ø–µ: {group.title}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ: {e}")
        
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        await client.run_until_disconnected()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    asyncio.run(main())
